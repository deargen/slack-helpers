{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"slack-helpers","text":""},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> slack_helpers<ul> <li> cli<ul> <li> main</li> </ul> </li> <li> health<ul> <li> font</li> <li> slack</li> </ul> </li> <li> interactive</li> <li> send_only</li> <li> utils<ul> <li> log</li> <li> rich</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/slack_helpers/","title":"Index","text":""},{"location":"reference/slack_helpers/interactive/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> interactive","text":"<p>This module is used to start the Slack app in interactive mode.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from slack_helpers import app\n&gt;&gt;&gt; from slack_helpers.interactive import handler\n&gt;&gt;&gt; @app.message(\"hello\")\n... def hello_message(body: dict[str, Any], say):\n...     logger.info(\"Received a hello command\")\n...     logger.info(f\"body: {pformat(body)}\")\n...     say(text=f\"Hi &lt;@{body['event']['user']}&gt;!\")\n</code></pre> <pre><code>&gt;&gt;&gt; handler.start()\n</code></pre>"},{"location":"reference/slack_helpers/send_only/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> send_only","text":""},{"location":"reference/slack_helpers/send_only/#slack_helpers.send_only.send_text_as_file","title":"<code>send_text_as_file(*, filename, content, title, ensure_preview=False, initial_comment=None, channel_id=None, client=None)</code>","text":"<p>Send a text as a file to the default client and channel (if not specified).</p> <p>Slack is stupid and having special characters in the file makes it think it's a binary file. If ensure_preview is True, then we append six double quotes at the beginning of the file so Slack thinks it's a python file and will preview it.</p> Note <p><code>ensure_preview</code> is a hacky workaround and may not work in the future.</p> Issues <p><code>ensure_preview</code> only works with text-ish files (txt, html, etc.) and not with other files (pdf, png, svg). You can set the <code>filename</code> to be like \"file.html\" for svg files with the <code>ensure_preview</code> flag.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> required <code>content</code> <code>str</code> required <code>title</code> <code>str</code> required <code>ensure_preview</code> <code>bool</code> <p>If True, append six double quotes at the beginning of the file to ensure that             Slack will preview it.</p> <code>False</code> <code>initial_comment</code> <code>str | None</code> <code>None</code> <code>channel_id</code> <code>str | None</code> <code>None</code> <code>client</code> <code>WebClient | None</code> <code>None</code> Source code in <code>src/slack_helpers/send_only.py</code> <pre><code>def send_text_as_file(\n    *,\n    filename: str,\n    content: str,\n    title: str,\n    ensure_preview: bool = False,\n    initial_comment: str | None = None,\n    channel_id: str | None = None,\n    client: WebClient | None = None,\n):\n    \"\"\"\n    Send a text as a file to the default client and channel (if not specified).\n\n    Slack is stupid and having special characters in the file makes it think it's a binary file.\n    If ensure_preview is True, then we append six double quotes at the beginning of the file so Slack thinks\n    it's a python file and will preview it.\n\n    Note:\n        `ensure_preview` is a hacky workaround and may not work in the future.\n\n    Issues:\n        `ensure_preview` only works with text-ish files (txt, html, etc.) and not with other files (pdf, png, svg).\n        You can set the `filename` to be like \"file.html\" for svg files with the `ensure_preview` flag.\n\n    Args:\n        filename:\n        content:\n        title:\n        ensure_preview: If True, append six double quotes at the beginning of the file to ensure that\n                        Slack will preview it.\n        initial_comment:\n        channel_id:\n        client:\n    \"\"\"\n    if client is None:\n        client = default_client\n    if client is None:\n        warn_once()\n        return None\n    if channel_id is None:\n        channel_id = default_channel_id\n        assert channel_id is not None\n\n    if ensure_preview:\n        content = '\"\"\"\"dear-viewer\"\"\"\"\\n' + content\n\n    return client.files_upload_v2(\n        filename=filename,\n        content=content,\n        title=title,\n        channel=channel_id,\n        initial_comment=initial_comment,\n    )\n</code></pre>"},{"location":"reference/slack_helpers/send_only/#slack_helpers.send_only.send_svg_as_pdf","title":"<code>send_svg_as_pdf(filename, svg_file, title, initial_comment=None, channel_id=None, client=None)</code>","text":"<p>Send an SVG file as a PDF file.</p> <p>Slack does not support previewing SVG files, so we convert it to PDF.</p> Issues <p>The cairosvg library does not have good support for fonts, and if you <code>export_svg</code> from <code>rich.console</code> then it will have font alignment issues, even if you install the Fira Code font on your system.</p> Source code in <code>src/slack_helpers/send_only.py</code> <pre><code>def send_svg_as_pdf(\n    filename: str,\n    svg_file: str | bytes | IOBase,\n    title: str,\n    initial_comment: str | None = None,\n    channel_id: str | None = None,\n    client: WebClient | None = None,\n):\n    \"\"\"\n    Send an SVG file as a PDF file.\n\n    Slack does not support previewing SVG files, so we convert it to PDF.\n\n    Issues:\n        The cairosvg library does not have good support for fonts, and if you `export_svg` from `rich.console`\n        then it will have font alignment issues, even if you install the Fira Code font on your system.\n    \"\"\"\n    if client is None:\n        client = default_client\n    if client is None:\n        warn_once()\n        return None\n    if channel_id is None:\n        channel_id = default_channel_id\n        assert channel_id is not None\n\n    pdf_buf = BytesIO()\n\n    if isinstance(svg_file, (str, bytes)):\n        cairosvg.svg2pdf(bytestring=svg_file, write_to=pdf_buf)\n    elif isinstance(svg_file, IOBase):\n        cairosvg.svg2pdf(file_obj=svg_file, write_to=pdf_buf)\n    else:\n        raise ValueError(f\"Unsupported type {type(svg_file)}\")\n\n    pdf_buf.seek(0)\n\n    return client.files_upload_v2(\n        filename=filename,\n        file=pdf_buf,\n        title=title,\n        channel=channel_id,\n        initial_comment=initial_comment,\n    )\n</code></pre>"},{"location":"reference/slack_helpers/cli/","title":"Index","text":""},{"location":"reference/slack_helpers/cli/main/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> main","text":""},{"location":"reference/slack_helpers/health/","title":"Index","text":"<p>Check health of the installation.</p>"},{"location":"reference/slack_helpers/health/font/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> font","text":""},{"location":"reference/slack_helpers/health/font/#slack_helpers.health.font.verify_fonts_installed","title":"<code>verify_fonts_installed()</code>","text":"<p>This function verifies that the FiraCode font is installed because Rich Console.export_svg() uses it.</p> <p>Actually, the svg itself doesn't need the font but when we convert it to PDF using cairosvg, the font is needed.</p> Source code in <code>src/slack_helpers/health/font.py</code> <pre><code>def verify_fonts_installed():\n    \"\"\"\n    This function verifies that the FiraCode font is installed because Rich Console.export_svg() uses it.\n\n    Actually, the svg itself doesn't need the font but when we convert it to PDF using cairosvg, the font is needed.\n    \"\"\"\n    cmd = [\"fc-match\", \"FiraCode:style=Regular\"]\n    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]\n\n    if not output.decode(\"utf-8\").startswith(\"FiraCode-Regular\"):\n        raise FontNotInstalledError(\"FiraCode\")\n\n    cmd = [\"fc-match\", \"FiraCode:style=Bold\"]\n    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]\n\n    if not output.decode(\"utf-8\").startswith(\"FiraCode-Bold\"):\n        raise FontNotInstalledError(\"FiraCode\")\n</code></pre>"},{"location":"reference/slack_helpers/health/slack/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> slack","text":""},{"location":"reference/slack_helpers/utils/","title":"Index","text":""},{"location":"reference/slack_helpers/utils/log/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> log","text":""},{"location":"reference/slack_helpers/utils/log/#slack_helpers.utils.log.setup_logging","title":"<code>setup_logging(console_level=logging.INFO, log_dir=None, output_files=None, file_levels=None)</code>","text":"<p>Setup logging with RichHandler and FileHandler.</p> <p>You should call this function at the beginning of your script.</p> <p>Parameters:</p> Name Type Description Default <code>console_level</code> <code>int</code> <p>Logging level for console. Defaults to INFO or env var MLPROJECT_LOG_LEVEL.</p> <code>INFO</code> <code>log_dir</code> <code>str | PathLike | None</code> <p>Directory to save log files. If None, do not save log files.</p> <code>None</code> <code>output_files</code> <code>list[str] | None</code> <p>List of output file paths, relative to log_dir. If None, use default.</p> <code>None</code> <code>file_levels</code> <code>list[int] | None</code> <p>List of logging levels for each output file. If None, use default.</p> <code>None</code> Source code in <code>src/slack_helpers/utils/log.py</code> <pre><code>def setup_logging(\n    console_level: int = logging.INFO,\n    log_dir: str | PathLike | None = None,\n    output_files: list[str] | None = None,\n    file_levels: list[int] | None = None,\n):\n    \"\"\"\n    Setup logging with RichHandler and FileHandler.\n\n    You should call this function at the beginning of your script.\n\n    Args:\n        console_level: Logging level for console. Defaults to INFO or env var MLPROJECT_LOG_LEVEL.\n        log_dir: Directory to save log files. If None, do not save log files.\n        output_files: List of output file paths, relative to log_dir. If None, use default.\n        file_levels: List of logging levels for each output file. If None, use default.\n    \"\"\"\n    if log_dir is None:\n        assert output_files is None, \"output_files must be None if log_dir is None\"\n        assert file_levels is None, \"file_levels must be None if log_dir is None\"\n\n        output_files = []\n        file_levels = []\n    else:\n        log_dir = Path(log_dir)\n\n        if output_files is None:\n            output_files = [\"{date:%Y%m%d-%H%M%S}-{name}-{levelname}-{version}.log\"]\n        if file_levels is None:\n            file_levels = [logging.INFO]\n\n    assert len(output_files) == len(\n        file_levels\n    ), \"output_files and file_levels must have the same length\"\n\n    # NOTE: Initialise with NOTSET level and null device, and add stream handler separately.\n    # This way, the root logging level is NOTSET (log all), and we can customise each handler's behaviour.\n    # If we set the level during the initialisation, it will affect to ALL streams,\n    # so the file stream cannot be more verbose (lower level) than the console stream.\n    logging.basicConfig(\n        format=\"\",\n        level=logging.NOTSET,\n        stream=open(os.devnull, \"w\"),  # noqa: SIM115\n    )\n\n    # If you want to suppress logs from other modules, set their level to WARNING or higher\n    # logging.getLogger('some_package.utils').setLevel(logging.WARNING)\n\n    console_handler = RichHandler(\n        level=console_level,\n        show_time=True,\n        show_level=True,\n        show_path=True,\n        rich_tracebacks=True,\n        tracebacks_show_locals=True,\n    )\n    console_format = logging.Formatter(\n        fmt=\"%(name)s - %(message)s\",\n        datefmt=\"%m/%d %H:%M:%S\",\n    )\n    console_handler.setFormatter(console_format)\n\n    f_format = logging.Formatter(\n        fmt=\"%(asctime)s - %(name)s: %(lineno)4d - %(levelname)s - %(message)s\",\n        datefmt=\"%y/%m/%d %H:%M:%S\",\n    )\n\n    function_caller_module = inspect.getmodule(inspect.stack()[1][0])\n    if function_caller_module is None:\n        name_or_path = \"unknown\"\n    elif function_caller_module.__name__ == \"__main__\":\n        if function_caller_module.__file__ is None:\n            name_or_path = function_caller_module.__name__\n        else:\n            name_or_path = function_caller_module.__file__.replace(\"/\", \".\")\n            # Remove .py extension\n            name_or_path = Path(name_or_path).with_suffix(\"\")\n\n    else:\n        name_or_path = function_caller_module.__name__\n\n    log_path_map = {\n        \"name\": name_or_path,\n        \"version\": __version__,\n        \"date\": datetime.now(timezone.utc),\n    }\n\n    root_logger = logging.getLogger()\n    root_logger.addHandler(console_handler)\n\n    if log_dir is not None:\n        log_paths = []\n        for output_file, file_level in zip(output_files, file_levels, strict=True):\n            log_path_map[\"levelname\"] = logging._levelToName[file_level]\n            log_path = log_dir / output_file.format_map(log_path_map)\n            log_path.parent.mkdir(parents=True, exist_ok=True)\n\n            f_handler = logging.FileHandler(log_path)\n            f_handler.setLevel(file_level)\n            f_handler.setFormatter(f_format)\n\n            # Add handlers to the logger\n            root_logger.addHandler(f_handler)\n\n        for log_path in log_paths:\n            logger.info(f\"Logging to {log_path}\")\n</code></pre>"},{"location":"reference/slack_helpers/utils/rich/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> rich","text":""},{"location":"reference/slack_helpers/utils/rich/#slack_helpers.utils.rich.rich_print_to_string","title":"<code>rich_print_to_string(objs)</code>","text":"<p>Convert a rich console print output to a string.</p> Source code in <code>src/slack_helpers/utils/rich.py</code> <pre><code>def rich_print_to_string(objs: Iterable[Any] | Any) -&gt; str:\n    \"\"\"Convert a rich console print output to a string.\"\"\"\n    console = Console(\n        width=CONSOLE_WIDTH,\n        no_color=True,\n        highlight=False,\n        record=True,\n        file=open(os.devnull, \"w\"),  # noqa: SIM115\n    )\n\n    if not isinstance(objs, Iterable):\n        objs = [objs]\n    for obj in objs:\n        console.print(obj)\n\n    return console.export_text()\n</code></pre>"},{"location":"reference/slack_helpers/utils/rich/#slack_helpers.utils.rich.rich_print_to_html","title":"<code>rich_print_to_html(objs, backend='ansi2html')</code>","text":"<p>Convert a rich console print output to an html string.</p> <p>rich backend can be prettier with the following caveats: 1. It produces a larger file size (2x) 2. It isn't as easy to read as a plain HTML code due to alignment and many html tags. 3. Slack doesn't understand the HTML code produced by <code>console.export_html()</code> and treat it as a binary file.</p> <p>Parameters:</p> Name Type Description Default <code>objs</code> <code>Iterable[Any] | Any</code> <p>The objects to print. Possibly but not limited to rich objects.</p> required <code>backend</code> <code>Literal['ansi2html', 'rich']</code> <p>\"ansi2html\" or \"rich\". Defaults to \"ansi2html\".</p> <code>'ansi2html'</code> Source code in <code>src/slack_helpers/utils/rich.py</code> <pre><code>def rich_print_to_html(\n    objs: Iterable[Any] | Any,\n    backend: Literal[\"ansi2html\", \"rich\"] = \"ansi2html\",\n) -&gt; str:\n    \"\"\"\n    Convert a rich console print output to an html string.\n\n    rich backend can be prettier with the following caveats:\n    1. It produces a larger file size (2x)\n    2. It isn't as easy to read as a plain HTML code due to alignment and many html tags.\n    3. Slack doesn't understand the HTML code produced by `console.export_html()` and treat it as a binary file.\n\n    Args:\n        objs: The objects to print. Possibly but not limited to rich objects.\n        backend: \"ansi2html\" or \"rich\". Defaults to \"ansi2html\".\n    \"\"\"\n    assert backend in (\"ansi2html\", \"rich\")\n\n    console = Console(width=CONSOLE_WIDTH, record=True, file=open(os.devnull, \"w\"))  # noqa: SIM115\n\n    if not isinstance(objs, Iterable):\n        objs = [objs]\n    for obj in objs:\n        console.print(obj)\n\n    if backend == \"rich\":\n        return console.export_html(theme=MONOKAI)\n\n    tb_ansi = console.export_text(styles=True)  # text with ansi color codes\n    return Ansi2HTMLConverter().convert(tb_ansi)\n</code></pre>"},{"location":"reference/slack_helpers/utils/rich/#slack_helpers.utils.rich.rich_print_to_svg","title":"<code>rich_print_to_svg(objs, title)</code>","text":"<p>Convert a rich console print to an svg string.</p> Source code in <code>src/slack_helpers/utils/rich.py</code> <pre><code>def rich_print_to_svg(objs: Iterable[Any] | Any, title: str) -&gt; str:\n    \"\"\"Convert a rich console print to an svg string.\"\"\"\n    console = Console(width=CONSOLE_WIDTH, record=True, file=open(os.devnull, \"w\"))  # noqa: SIM115\n\n    if not isinstance(objs, Iterable):\n        objs = [objs]\n    for obj in objs:\n        console.print(obj)\n\n    return console.export_svg(title=title)\n</code></pre>"},{"location":"reference/slack_helpers/utils/rich/#slack_helpers.utils.rich.rich_traceback_to_string","title":"<code>rich_traceback_to_string(tb)</code>","text":"<p>Convert a rich traceback to a string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; try:\n...    1 / 0\n... except ZeroDivisionError:\n...     import rich.traceback\n...     tb = rich.traceback.Traceback()\n...     print(rich_traceback_to_string(tb))\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n...\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nZeroDivisionError: division by zero\n</code></pre> Source code in <code>src/slack_helpers/utils/rich.py</code> <pre><code>def rich_traceback_to_string(tb: Traceback) -&gt; str:\n    \"\"\"\n    Convert a rich traceback to a string.\n\n    Examples:\n        &gt;&gt;&gt; try:   # doctest: +ELLIPSIS\n        ...    1 / 0\n        ... except ZeroDivisionError:\n        ...     import rich.traceback\n        ...     tb = rich.traceback.Traceback()\n        ...     print(rich_traceback_to_string(tb))\n        \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n        ...\n        \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n        ZeroDivisionError: division by zero\n        &lt;BLANKLINE&gt;\n    \"\"\"\n    return rich_print_to_string([tb])\n</code></pre>"},{"location":"reference/slack_helpers/utils/rich/#slack_helpers.utils.rich.rich_traceback_to_html","title":"<code>rich_traceback_to_html(tb, backend='ansi2html')</code>","text":"<p>Convert a rich traceback to an html string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; try:\n...    1 / 0\n... except ZeroDivisionError:\n...     import rich.traceback\n...     tb = rich.traceback.Traceback()\n...     print(rich_traceback_to_html(tb))\n&lt;!DOCTYPE HTML ...\n&lt;/html&gt;\n</code></pre> Source code in <code>src/slack_helpers/utils/rich.py</code> <pre><code>def rich_traceback_to_html(\n    tb: Traceback, backend: Literal[\"ansi2html\", \"rich\"] = \"ansi2html\"\n) -&gt; str:\n    \"\"\"\n    Convert a rich traceback to an html string.\n\n    Examples:\n        &gt;&gt;&gt; try:   # doctest: +ELLIPSIS\n        ...    1 / 0\n        ... except ZeroDivisionError:\n        ...     import rich.traceback\n        ...     tb = rich.traceback.Traceback()\n        ...     print(rich_traceback_to_html(tb))\n        &lt;!DOCTYPE HTML ...\n        &lt;/html&gt;\n        &lt;BLANKLINE&gt;\n    \"\"\"\n    return rich_print_to_html([tb], backend=backend)\n</code></pre>"},{"location":"reference/slack_helpers/utils/rich/#slack_helpers.utils.rich.rich_traceback_to_svg","title":"<code>rich_traceback_to_svg(tb, title)</code>","text":"<p>Convert a rich traceback to an svg string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; try:\n...    1 / 0\n... except ZeroDivisionError:\n...     import rich.traceback\n...     tb = rich.traceback.Traceback()\n...     print(rich_traceback_to_svg(tb, \"title\"))\n&lt;svg class=\"rich-terminal\" ...\n&lt;/svg&gt;\n</code></pre> Source code in <code>src/slack_helpers/utils/rich.py</code> <pre><code>def rich_traceback_to_svg(tb: Traceback, title: str) -&gt; str:\n    \"\"\"\n    Convert a rich traceback to an svg string.\n\n    Examples:\n        &gt;&gt;&gt; try:   # doctest: +ELLIPSIS\n        ...    1 / 0\n        ... except ZeroDivisionError:\n        ...     import rich.traceback\n        ...     tb = rich.traceback.Traceback()\n        ...     print(rich_traceback_to_svg(tb, \"title\"))\n        &lt;svg class=\"rich-terminal\" ...\n        &lt;/svg&gt;\n        &lt;BLANKLINE&gt;\n    \"\"\"\n    return rich_print_to_svg([tb], title)\n</code></pre>"}]}