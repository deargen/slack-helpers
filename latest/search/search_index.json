{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"python-project-template-2024","text":"<p>\uc0c8 \ud30c\uc774\uc36c \ud504\ub85c\uc81d\ud2b8 \uc2dc\uc791\ud560 \ub54c \uc0ac\uc6a9\ud558\uc2e4 \ud15c\ud50c\ub9bf\uc785\ub2c8\ub2e4.</p> <p>\uc8fc\uc694 \uae30\ub2a5</p> <ol> <li>Github Actions\ub85c ruff formatter, ruff linter, pytest (unit test) \ud1b5\uacfc \uc5ec\ubd80 \ud655\uc778<ul> <li>Actions\uc5d0\uc11c \ud3ec\ub9e4\ud305 \uc801\uc6a9 \uac00\ub2a5 </li> </ul> </li> <li>GitHub Actions\ub85c uv pip-compile \uc801\uc6a9 \uc5ec\ubd80 \ud655\uc778 (<code>deps/requirements.in</code>\uc758 dynamic version\uc744 <code>deps/lock</code> \uc548\uc5d0 lock file\ub85c \ubcc0\ud658)<ul> <li>Actions\uc5d0\uc11c lock file compile \uac00\ub2a5</li> </ul> </li> <li>MkDocs \uc774\uc6a9\ud574 \uc790\ub3d9 document \uc0dd\uc131<ul> <li>Public repo\ub294 GitHub Pages \uc774\uc6a9</li> <li>Private repo\ub294 GitLab Pages \uc774\uc6a9</li> </ul> </li> <li>\ud504\ub85c\uc81d\ud2b8 versioning\ud558\uace0 changelog \uc790\ub3d9 \uc0dd\uc131.<ul> <li>Actions\uc5d0\uc11c \uc0c8 \ubc84\uc804 release \uac00\ub2a5</li> <li>https://github.com/deargen/workflows \ucc38\uace0</li> </ul> </li> </ol>"},{"location":"#_1","title":"\ub3cc\ub824 \ubcf4\uae30","text":"<ol> <li>(Optional) <code>pip3 install --user uv</code> \ud574\uc11c pip \ub300\uc2e0 <code>uv pip</code> \uc0ac\uc6a9\ud558\uba74 \ub354 \ube60\ub984.</li> <li><code>uv pip install -r deps/lock/x86_64-manylinux_2_28/requirements.txt</code>, <code>uv pip install -e .</code>, <code>bash scripts/install_binaries.sh</code> \uc73c\ub85c dependencies \ubc0f mlproject \ud328\ud0a4\uc9c0 \uc124\uce58</li> <li>template.env \ud30c\uc77c\uc744 .env\ub85c \ubcf5\uc0ac\ud55c \ud6c4 token \ub4f1 \ub0b4\uc6a9 \uc218\uc815.</li> <li><code>python -m mlproject.health</code> \uc2e4\ud589\ud574\uc11c \ud658\uacbd \uc124\uc815\uc774 \uc798 \ub418\uc5c8\ub294\uc9c0 \ud655\uc778.</li> <li><code>python tools/examples/color_logging_main.py</code> \uc2e4\ud589\ud574\ubcf4\uae30. \ub85c\uae45 \ub0b4\uc6a9\uc740 <code>data/logs</code> \ud3f4\ub354 \uc548\uc5d0 \uae30\ub85d\ub428.</li> <li><code>uv pip install -r deps/lock/x86_64-manylinux_2_28/requirements_dev.txt</code> \uc73c\ub85c pytest \ub4f1 \uac1c\ubc1c\uc790\uc6a9 \ud328\ud0a4\uc9c0\ub3c4 \uc124\uce58\uac00\ub2a5</li> <li><code>pytest</code> \ucee4\ub9e8\ub4dc\ub85c \ud14c\uc2a4\ud2b8 \uc2e4\ud589\ud574\ubcf4\uae30.<ul> <li>doctest\ub294 Actions\uc5d0\uc11c \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\ub428.</li> </ul> </li> <li><code>import mlproject; print(mlproject.__version__)</code> \ud574\ubcf4\uba74 <code>0.1.0+4.g75bbed7.dirty</code> \uc774\ub7f0\uc2dd\uc73c\ub85c \ub098\uc634.  <ul> <li>0.1.0 \ubc84\uc804 \uc774\ud6c4 4\uac1c\uc758 \ucee4\ubc0b\uc774\ub780 \ub73b. \uadf8\ub9ac\uace0 \ucee4\ubc0b\ub418\uc9c0 \uc54a\uc740 \uc218\uc815\uc0ac\ud56d\uc774 \uc788\ub294 \uc0c1\ud0dc\uc774\uba74 dirty\ubc84\uc804\uc784.</li> </ul> </li> </ol>"},{"location":"#_2","title":"\ud30c\uc77c \uc124\uba85","text":"<pre><code>\ud83d\udcc2 .vscode/\n\u2514 \ud83d\udcc4 extensions.json        # VSCode\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ud655\uc7a5 \ud504\ub85c\uadf8\ub7a8 \ubaa9\ub85d.\n\n\ud83d\udcc2 .github/\n\u2502 \ud83d\udcc2 ISSUE_TEMPLATE/\n\u2514 \ud83d\udcc2 workflows/             # \uae43\ud5d9 \uc561\uc158 \uc790\ub3d9\ud654 \ubc30\ud3ec \ud30c\uc774\ud504\ub77c\uc778\n  \u2514 \ud83d\udcc4 *.yml\n\n\ud83d\udcc2 src/\n\u2514 \ud83d\udcc2 mlproject/             # `import mlproject`\ud574\uc11c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\ub098 \ud074\ub798\uc2a4 \ub4f1 \uc815\uc758\ud558\ub294 \uacf3\n  \u2502 \ud83d\udc0d __init__.py\n  \u2502 \ud83d\udc0d _version.py          # git tag\ub85c \ubc84\uc804 \uc815\ubcf4\ub97c \uc77d\ub294 versioneer \ud30c\uc77c (\uc218\uc815X)\n  \u2514 \ud83d\udc0d ...\n\n\ud83d\udcc2 tools/                   # import \ud558\uc9c0 \uc54a\uace0 \ubc14\ub85c \uc2e4\ud589 \uac00\ub2a5\ud55c \ud30c\uc77c\ub4e4. (\uc608: train.py)\n\n\ud83d\udcc2 tests/                   # `pytest` \uc2e4\ud589\uc2dc \uc2e4\ud589\ub418\ub294 \ud568\uc218\ub4e4\n\n\ud83d\udcc2 scripts/                 # \ud504\ub85c\uc81d\ud2b8\uc640 \uc9c1\uc811 \uad00\ub828 X, but \ud504\ub85c\uc81d\ud2b8 \uad00\ub9ac\ub97c \uc704\ud574 \ud544\uc694\n\n\ud83d\udcc2 deps/\n\u2502 # \uc9c1\uc811 \uc218\uc815 X. .github/workflows/apply-pip-compile.yml \uc2e4\ud589\uc2dc \uc0dd\uc131\ub428.\n\u2502 \ud83d\udee1\ufe0f .requirements.in.sha256\n\u2502 \ud83d\udee1\ufe0f .requirements_dev.in.sha256\n\u2502 \ud83d\udee1\ufe0f .requirements_docs.in.sha256\n\u2502\n\u2502 # \ud504\ub85c\uadf8\ub7a8 \uc0ac\uc6a9\uc790\uc5d0\uac8c \ud544\uc694\ud55c dependencies.\n\u2502 \ud83d\udd8a\ufe0f requirements.in\n\u2502 # \ud504\ub85c\uadf8\ub7a8 \uc0ac\uc6a9\uc790\uac00 \uc544\ub2cc \uac1c\ubc1c\uc790\uc5d0\uac8c \ud544\uc694\ud55c dependencies.\n\u2502 \ud83d\udd8a\ufe0f requirements_dev.in\n\u2502 # mkdocs\ub85c \ubb38\uc11c \uc0dd\uc131\ud560\ub54c \ud544\uc694\ud55c \ud504\ub85c\uadf8\ub7a8\ub4e4\n\u2502 \ud83d\udd8a\ufe0f requirements_docs.in\n\u2502 # NOTE: in \ud30c\uc77c\uc740 lock \ud30c\uc77c\uc774 \uc544\ub2cc \ud328\ud0a4\uc9c0 dependency\uc774\ubbc0\ub85c \uc804\ubd80 dynamic version\uc73c\ub85c \uc791\uc131\ud574\uc57c\ud568.\n\u2502\n\u2502 # \uc9c1\uc811 \uc218\uc815 X. in \ud30c\uc77c\uc5d0\uc11c \uc0dd\uc131\ub428\n\u2514 \ud83d\udcc2 lock/\n  \u2502 \ud83d\udd12 requirements.txt\n  \u2502 \ud83d\udd12 requirements_dev.txt\n  \u2514 \ud83d\udd12 requirements_docs.txt\n\n\u2699\ufe0f pyproject.toml            # \ud30c\uc774\uc36c \ud504\ub85c\uc81d\ud2b8 \ud1b5\ud569 \uc815\ubcf4. ruff\ub4f1 \uc678\ubd80 \ud234\uc758 \uc124\uc815\ub3c4 \ud3ec\ud568.\n</code></pre>"},{"location":"#_3","title":"\ud15c\ud50c\ub9bf \uc0ac\uc6a9\ud558\uae30","text":"<ol> <li><code>src/mlproject</code> \ud3f4\ub354 \uc774\ub984 \uc6d0\ud558\ub294 \uac78\ub85c \ubc14\uafb8\uae30 (<code>import mlproject</code> \ud560 \ub54c \uc774\ub984)</li> <li><code>pyproject.toml</code>\uc5d0 \ubc14\uafd4\uc57c\ud558\ub294 \ubd80\ubd84 \uc8fc\uc11d \ub418\uc5b4\uc788\uc74c. \ubc14\uafd4 \uc4f0\uae30</li> <li><code>deps/requirements*.in</code>\uc744 \uc218\uc815\ud558\uba74 <code>deps/lock</code> \ud3f4\ub354\uc5d0 lock \ud30c\uc77c\uc774 \uc0dd\uc131\ub428. (Actions)</li> <li><code>README.md</code>\uc5d0 \uc788\ub294 badge\ub4e4 URL (python-project-template-2024 -&gt; \uc0c8 \uc8fc\uc18c) \ubc14\uafb8\uc5b4 \uc8fc\uc5b4\uc57c \uc81c\ub300\ub85c \ud14c\uc2a4\ud2b8 \uacb0\uacfc\uac00 \ub738.</li> <li><code>.github</code> \ud3f4\ub354 \ubcf5\uc0ac\ud55c \ub4a4,<ul> <li>GitLab\uc5d0 document \ud638\uc2a4\ud305\uc6a9 \uc0c8 repo\ub97c \ub9cc\ub4e6 (\uc608: mlproject-docs)<ul> <li>GitLab Pages \uc124\uc815 \ubb38\uc11c \ucc38\uace0.</li> </ul> </li> <li>docs, deploy \ud560 \ub54c \ud544\uc694\ud55c gitlab \uc8fc\uc18c\uc640 \ud1a0\ud070\uc740 Github \ud504\ub85c\uc81d\ud2b8 \uc124\uc815\uc5d0\uc11c Environment secrets / variable\uc744 \ubc14\uafb8\uc5b4\uc57c \ud568.</li> </ul> </li> <li><code>setup.py</code>\ub294 \uadf8\ub300\ub85c \ubcf5\uc0ac\ud574 \ub450\uba74 \ub428</li> <li>\ud14c\uc2a4\ud2b8\ub97c \uc791\uc131\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0, <code>tests/</code> \ud3f4\ub354 \uc548\uc758 \ud30c\uc77c \uc804\ubd80 \uc0ad\uc81c\ud558\uba74 GitHub Actions\uc5d0\uc11c \ud14c\uc2a4\ud2b8 \ud1b5\uacfc\ub428.</li> <li>\u2b50 VSCode\uc5d0 Python Tools \ub0b4\uc6a9 \uc804\ubd80 (formatter, linter, LSP \ub4f1) \uc801\uc6a9\ud558\uae30.</li> </ol>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#v020-2024-07-02","title":"v0.2.0 - 2024-07-02","text":""},{"location":"CHANGELOG/#new-features","title":"New Features","text":"<ul> <li><code>6892dcc</code> - reusable workflows (PR #23 by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#v015-2024-06-28","title":"v0.1.5 - 2024-06-28","text":""},{"location":"CHANGELOG/#new-features_1","title":"New Features","text":"<ul> <li><code>929fb46</code> - health check, install binaries, font etc. (commit by @kiyoon)</li> <li><code>fab2e06</code> - vscode extensions recommendations (commit by @kiyoon)</li> <li><code>3687e2f</code> - mac separate dependencies (commit by @kiyoon)</li> <li><code>7d22258</code> - mac dependencies (commit by @kiyoon)</li> <li><code>0390e7a</code> - gh action annotation for ruff (PR #21 by @kiyoon)</li> <li><code>8a20166</code> - check docs compiling (commit by @kiyoon)</li> <li><code>dd09beb</code> - dry-run changelog generation (commit by @kiyoon)</li> <li><code>09672e0</code> - get_python_version.py without toml dependency, compile reqs with (commit by @kiyoon)</li> <li><code>c3fc757</code> - deploy dry run completely separate job (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li><code>22f16d5</code> - slack: send_only (commit by @kiyoon)</li> <li><code>4bd8ae8</code> - slack token default being wrong token (commit by @kiyoon)</li> <li><code>8a63607</code> - dry-run deploy leaving version tag (commit by @kiyoon)</li> <li><code>f9adbf7</code> - maybe fix echo evaluating backticks (commit by @kiyoon)</li> <li><code>be3b895</code> - maybe fix wrong echo (commit by @kiyoon)</li> <li><code>cd6f2ee</code> - ci deploy always dry-run (commit by @kiyoon)</li> <li><code>d4d9766</code> - get python version (commit by @kiyoon)</li> <li><code>7bee54b</code> - use min python version instead of max (PR #22 by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#chores","title":"Chores","text":"<ul> <li><code>6ba5a0a</code> - ignore ruff SIM108 (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#v014-2024-03-08","title":"v0.1.4 - 2024-03-08","text":""},{"location":"CHANGELOG/#new-features_2","title":"New Features","text":"<ul> <li><code>fa319d1</code> - dependabot (commit by @kiyoon)</li> <li><code>d13437a</code> - doctest, test cache (commit by @kiyoon)</li> <li><code>5c64a64</code> - diagram with mermaid (commit by @kiyoon)</li> <li><code>87a5e82</code> - config system with env vars (commit by @kiyoon)</li> <li><code>828d38b</code> - use uv pip compile (commit by @kiyoon)</li> <li><code>aa79009</code> - slack and health (commit by @kiyoon)</li> <li><code>11430d5</code> - send exception to slack (txt, html, pdf) (commit by @kiyoon)</li> <li><code>40fcb05</code> - dynamic dependencies (no more declaring inside pyproject.toml) (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li><code>c65c2aa</code> - requirements (commit by @kiyoon)</li> <li><code>964e190</code> - docs (commit by @kiyoon)</li> <li><code>4b16c37</code> - docs (commit by @kiyoon)</li> <li><code>270c1b3</code> - doctest (commit by @kiyoon)</li> <li><code>1f4adfe</code> - ppmi -&gt; mlproject (commit by @kiyoon)</li> <li><code>8750e67</code> - docs (commit by @kiyoon)</li> <li><code>25c6266</code> - ci (commit by @kiyoon)</li> <li><code>32a7947</code> - failing doctest (commit by @kiyoon)</li> <li><code>eeb48a0</code> - requirements_dev (commit by @kiyoon)</li> <li><code>15c58d5</code> - compile_requirements (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#performance-improvements","title":"Performance Improvements","text":"<ul> <li><code>35a8ec9</code> - cache doc pip dependencies (commit by @kiyoon)</li> <li><code>dff52a1</code> - improve docs action (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#refactors","title":"Refactors","text":"<ul> <li><code>c269ff8</code> - remove hard-coded versions from CI (commit by @kiyoon)</li> <li><code>9f2a693</code> - ruff version from requirements (commit by @kiyoon)</li> <li><code>7d983e7</code> - rich print exporting, not only traceback (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#v013-2024-01-28","title":"v0.1.3 - 2024-01-28","text":""},{"location":"CHANGELOG/#new-features_3","title":"New Features","text":"<ul> <li><code>26e3420</code> - mkdocs: add init.py generator script (commit by @kiyoon)</li> <li><code>dac4beb</code> - logging, more example of docstring (commit by @kiyoon)</li> <li><code>afd9514</code> - format on action (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li><code>b877fc8</code> - ci (commit by @kiyoon)</li> <li><code>156859a</code> - some ppmi stuff (commit by @kiyoon)</li> <li><code>8c18b80</code> - ci (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#chores_1","title":"Chores","text":"<ul> <li><code>7b4dcf8</code> - change url (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#other-changes","title":"Other Changes","text":"<ul> <li><code>dd2cb1d</code> - Merge branch 'master' of ssh://github.com/deargen/python-project-template-2024 (commit by @kiyoon)</li> <li><code>21ac2b3</code> - Merge branch 'master' of ssh://github.com/deargen/python-project-template-2024 (commit by @kiyoon)</li> <li><code>7afc6d4</code> - Merge branch 'master' of ssh://github.com/deargen/python-project-template-2024 (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#v012-2024-01-16","title":"v0.1.2 - 2024-01-16","text":""},{"location":"CHANGELOG/#chores_2","title":"Chores","text":"<ul> <li><code>e4445cf</code> - test new changelog path (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#other-changes_1","title":"Other Changes","text":"<ul> <li><code>e3cb529</code> - Merge branch 'master' of ssh://github.com/deargen/python-project-template-2024 (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#v011-2024-01-16","title":"v0.1.1 - 2024-01-16","text":""},{"location":"CHANGELOG/#chores_3","title":"Chores","text":"<ul> <li><code>e375a3b</code> - move CHANGELOG.md into docs/ (commit by @kiyoon)</li> </ul>"},{"location":"CHANGELOG/#v010-2024-01-16","title":"v0.1.0 - 2024-01-16","text":""},{"location":"CHANGELOG/#chores_4","title":"Chores","text":"<ul> <li><code>2e302a0</code> - change URL (commit by @kiyoon)</li> </ul>"},{"location":"git/format_code/","title":"\uae43\ud5d9\uc5d0\uc11c \uc989\uc2dc formatting\ud558\uae30","text":"<p>Formatting\uc5d0 \uad00\ub828\ud55c \ub0b4\uc6a9\uc740 Python tools / Formatters \ucc38\uace0.</p> <p>VSCode\uc5d0\uc11c \uc790\ub3d9 formatting\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\uc9c0\ub9cc, \ud639\uc2dc \uc801\uc6a9\ub418\uc9c0 \uc54a\uc740 \uacbd\uc6b0 GitHub Actions \uba54\ub274\uc5d0\uc11c \uc989\uc11d\uc73c\ub85c \uc801\uc6a9\ud574 \ucee4\ubc0b \uac00\ub2a5.</p> <p>Actions -&gt; Apply ruff format, isort, and fixes -&gt; Run workflow -&gt; select, ignore code \uc791\uc131 \ud6c4 Run workflow</p> <p></p> <p>Select</p> <ul> <li>I: isort \uad00\ub828 \ub8f0\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4.</li> <li>D20,D21: Docstrings \uad00\ub828 \ub8f0\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4.</li> <li>UP00: \uc61b\ub0a0 \ubc84\uc804 python \uad6c\ubb38\uc744 \ucd5c\uc2e0 \ubb38\ubc95\uc73c\ub85c \uace0\uce69\ub2c8\ub2e4. \ud2b9\ud788 typing \uad00\ub828\ud574 \ub9ce\uc774 \ubcc0\uacbd\ub429\ub2c8\ub2e4.</li> </ul> <p>Ignore</p> <ul> <li>D212: Docstring first line \uc2dc\uc791\ud558\uac8c \ud558\ub294 \ucf54\ub4dc\uc774\ub098 \uc801\uc6a9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub300\uc2e0 D213\uc73c\ub85c \ub300\uccb4\ud574 \ub450 \ubc88\uc9f8 line\uc5d0 \uc2dc\uc791\ud558\uac8c \ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"git/git_commit/","title":"Conventional Commits","text":"<p>\ucee4\ubc0b\uba54\uc2dc\uc9c0\ub294 conventional commits\ub97c \ub530\ub974\uae30</p> <ol> <li>fix: <code>MyDataloader</code> doesn\u2019t return an image</li> <li>feat: <code>train_step()</code></li> <li>perf: optimise loop in <code>train_step()</code></li> <li>chore: change dependency version in github action</li> <li>docs: readme add demo</li> <li>ci: add black formatting check (\uae43\ud5d9 \uc561\uc158 \uad00\ub828\ub41c \uac83)</li> <li>style: apply black formatter</li> <li>refactor: <code>train</code> function to <code>train_init</code> and <code>train_end</code></li> <li>test: check return type of <code>analyze_data</code></li> <li>\uadf8 \uc678, breaking change\ub294 fix!: \ucc98\ub7fc \ub290\ub08c\ud45c \ubd99\uc774\uae30</li> <li>\uadf8 \uc678, \uc790\uc138\ud55c \ud56d\ubaa9\uc740 fix(network): \ucc98\ub7fc \uad04\ud638\uc548\uc5d0 \uce74\ud14c\uace0\ub9ac \uc801\uae30</li> </ol>"},{"location":"git/github/","title":"Github \uc0ac\uc6a9\ubc95","text":""},{"location":"git/github/#pull-request","title":"Pull request \ud558\uae30","text":"<ol> <li>main\uc774 \uc544\ub2cc branch\ub97c \ub9cc\ub4e4\uc5b4 \uac1c\ubc1c</li> <li>\ud574\ub2f9 branch\ub97c push\ud558\uace0, pull request\ub97c \uc62c\ub9bc</li> <li>\uc5b4\ub5a4 issue\ub97c fix\ud558\ub294\uc9c0 \uc4f0\uae30 (\uc608: Fixes #1) -&gt; accept\ub418\uba74 \uc790\ub3d9\uc73c\ub85c issue \ub2eb\ud798</li> <li>pull request\ub294 \ub2e4\ub978 \ud300\uc6d0\uc774 \uac04\ub7b5\ud788 \ucf54\ub4dc \ub9ac\ubdf0\ud558\uace0 squash \ud639\uc740 rebase\ud558\uba74 \ub428. merge\ub294 \uc6ec\ub9cc\ud558\uba74 \ud53c\ud558\uae30.<ul> <li>\uc6ec\ub9cc\ud558\uba74 PR\uc740 squash\ud574\uc11c PR ID <code>\uc608: (#2)</code>\uac00 \ucee4\ubc0b \uba54\uc2dc\uc9c0\uc5d0 \ub4e4\uc5b4\uac00\uac8c \ud568.</li> </ul> </li> <li>accept\ub41c PR\uc740 \uc870\uae08 \uc9c0\ub098\uba74 branch \uc0ad\uc81c.</li> <li>\ucd94\uac00\ub85c \uc791\uc5c5\uc740 \ub2e4\uc2dc main branch\uc5d0\uc11c \uc0c8\ub85c branch \ud30c\uc11c \uc791\uc5c5</li> </ol>"},{"location":"git/github/#project-settings","title":"Project settings","text":"<p>Settings \ud398\uc774\uc9c0\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 \uc218\uc815:</p>"},{"location":"git/github/#branch-protection-rule","title":"Branch protection rule","text":"<ol> <li>main branch\ub294 \ub2e4\uc591\ud55c \uc0ac\ub78c\ub4e4\uc774 \uc774\uc6a9\ud558\ub294 branch \uc774\ubbc0\ub85c force push, deletion\uc744 \ud558\uba74 \uc548\ub428.</li> </ol> <p>\ud574\ub2f9 \uc635\uc158\uc740 branch protection rule\uc744 \ub9cc\ub4e4\uba74 default\uc784.</p> <p></p> <ol> <li>\uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6b4 merge commit\uc744 \ud53c\ud558\uace0 linear history \uc720\uc9c0\ud558\uae30</li> </ol> <p></p> <p>\uc774\ub807\uac8c \ud558\uba74 PR\uc744 merge\ud560 \ub54c merge commit\uc740 disable\ub428.</p> <p></p> <p>\uc6ec\ub9cc\ud558\uba74 PR\uc740 squash\ud558\uae30.</p>"},{"location":"git/github/#environments","title":"Environments","text":"<p>mkdocs \uc790\ub3d9 \ube4c\ub4dc\ub97c \ud6c4 GitLab\uc73c\ub85c \ud638\uc2a4\ud305\ud558\uae30 \uc704\ud574\uc11c \ud658\uacbd\ubcc0\uc218 \uc124\uc815\uc774 \ud544\uc694\ud568.  </p> <ol> <li> <p>Settings -&gt; Environments \uc5d0\uc11c mkdocs\ub77c\ub294 \uc774\ub984\uc758 \ud658\uacbd \ub9cc\ub4e4\uae30</p> <p></p> </li> <li> <p>Repository secrets\uc5d0 <code>GITLAB_TOKEN</code>\uc774\ub77c\ub294 \uc774\ub984\uc73c\ub85c GitLab token\uac12 \ub123\uc5b4\ub450\uae30.</p> <p>Danger</p> <p>Token\uac19\uc740 \ubbfc\uac10\ud55c \ub370\uc774\ud130\ub294 CI \ucf54\ub4dc\uc5d0 \ub123\uc9c0 \ub9d0\uace0 repositry secrets\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.  </p> </li> <li> <p>Environment variables\uc5d0 <code>GITLAB_PROJECT</code> \uc774\ub984\uc73c\ub85c GitLab project \uc8fc\uc18c \ub123\uc5b4\ub450\uae30. (\uc608: deargen-ai/python-project-template-docs)</p> </li> </ol> <p>Info</p> <p>Environment secrets\uc740 CI \ud30c\uc77c\uc5d0\uc11c <code>${{ secrets.GITLAB_TOKEN }}</code>\uacfc \uac19\uc774 \uc811\uadfc\ud569\ub2c8\ub2e4. Environment variable\uc740 <code>${{ vars.GITLAB_PROJECT }}</code>\uacfc \uac19\uc774 \uc811\uadfc\ud569\ub2c8\ub2e4.</p>"},{"location":"git/github/#github-actions-permissions","title":"GitHub Actions Permissions","text":"<p>GitHub Actions\uc774 \ud504\ub85c\uc81d\ud2b8\uc5d0 commit\uc744 \uc9c1\uc811 \ud560 \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4.</p> <ul> <li>\ud504\ub85c\uc81d\ud2b8 Settings \u2192 Actions \u2192 General \u2192 Workflow Permissions \u2192 Read and write \u2192 Save</li> </ul>"},{"location":"git/release_version/","title":"\uc0c8 \ubc84\uc804 Release","text":"<p>\uc5b4\ub290 \uc815\ub3c4 stable\ud55c \ubc84\uc804\uc774\ub2e4 \uc2f6\uc73c\uba74 Actions -&gt; Deploy a new version -&gt; Run workflow -&gt; Version tag \uc791\uc131 \ud6c4 Run workflow</p> <p></p> <p><code>.github/workflows/deploy.yml</code>\uc5d0 \uc788\ub294 \ub300\ub85c, <code>docs/CHANGELOG.md</code>, release\uc5d0 \ubc30\ud3ec, mkdocs \ubb38\uc11c \ubc84\uc804 \ub4f1 \uc0dd\uc131\uc774 \ub428.</p>"},{"location":"mkdocs/admonitions/","title":"Note \ucc3d \ub744\uc6b0\uae30","text":"<p>\uc8fc\uc758 \uae4a\uac8c \ubd10\uc57c \ud560 \uc124\uba85\uc740 Admonition \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub9c8\ud06c\ub2e4\uc6b4 \ud30c\uc77c\uc5d0 \uc544\ub798\uc640 \uac19\uc774 \uc791\uc131\ud569\ub2c8\ub2e4.</p> <pre><code>!!! note\n    \uc124\uba85\uc744 \uc801\uc2b5\ub2c8\ub2e4.\n</code></pre> <p>\ucd9c\ub825\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.</p> <p>Note</p> <p>\uc124\uba85\uc744 \uc801\uc2b5\ub2c8\ub2e4.</p> <p>\ub354 \uc790\uc138\ud55c \uc124\uba85\uc740 mkdoc-material docs\ub97c \ucc38\uace0\ud558\uc138\uc694.</p>"},{"location":"mkdocs/api_reference/","title":"API Reference \ud398\uc774\uc9c0","text":"<p>\ubcf8 template\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c API Reference \ud398\uc774\uc9c0\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \ucd94\uac00 \uc124\uc815\uc774 \ud544\uc694\ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4.</p> mkdocs.yml \uc608\uc2dc<pre><code>nav:\n- Home:\n  - Overview: index.md\n  - Changelog: changelog.md\n- Usage:\n  - usage/index.md\n  - Theming: usage/theming.md\n  - Handlers: usage/handlers.md\n  - All handlers:\n    - Crystal: https://mkdocstrings.github.io/crystal/\n    - Shell: https://mkdocstrings.github.io/shell/\n  - Guides:\n    - Recipes: recipes.md\n    - Troubleshooting: troubleshooting.md\n# defer to gen-files + literate-nav\n- API reference:\n  - mkdocstrings: reference/\n</code></pre> <ul> <li> <p>API reference\ub294 gen-files\uc640 literate-nav \ud50c\ub7ec\uadf8\uc778\uc744 \ud1b5\ud574 \uc0dd\uc131.</p> <ul> <li>gen-files: \ube4c\ub4dc \uc804 \ud30c\uc77c \uc0dd\uc131\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8 \uc2e4\ud589 \uac00\ub2a5</li> <li>literate-nav: markdown \ud30c\uc77c\ub85c nav \uba54\ub274 \ub3d9\uc801 \uc124\uc815 \uac00\ub2a5</li> </ul> <pre><code># mkdocs.yml\nplugins:\n- gen-files:\n    scripts:\n    - scripts/gen_ref_nav.py\n- literate-nav:\n    nav_file: SUMMARY.md\n</code></pre> <p><code>scripts/gen_ref_nav.py</code> \uc2e4\ud589\ud558\uba74 <code>reference/</code> \ub514\ub809\ud1a0\ub9ac\uc5d0 API reference \ud398\uc774\uc9c0\ub4e4 \uc790\ub3d9 \uc0dd\uc131\ub418\uba70 SUMMARY.md \uba54\ub274(nav) \ud30c\uc77c\uc744 \ub9cc\ub4e6.</p> </li> </ul>"},{"location":"mkdocs/gitlab_pages/","title":"GitLab Pages","text":"<p>mkdocs\ub85c \uc791\uc131\ub41c \ubb38\uc11c\ub294 GitLab Pages\ub85c \ud638\uc2a4\ud305\ud569\ub2c8\ub2e4.</p> <p>GitLab\uc744 \uc774\uc6a9\ud558\ub294 \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.</p> <ol> <li>GitHub Pages\ub294 private repo\ub85c \ud558\ub824\uba74 Enterprise plan \ud544\uc694</li> <li>GitLab Pages\ub294 read / write \uad8c\ud55c \ubc0f \ubb38\uc11c \ubc84\uc804\uad00\ub9ac\uac00 \uc6a9\uc774</li> </ol> <p>GitHub repo\uc758 main branch\ub85c push \ud55c \uacbd\uc6b0, GitHub CI\uc5d0\uc11c GitLab\uc73c\ub85c push\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 GitLab CI\uac00 \ub3cc\uba70 page \ud638\uc2a4\ud305\uc744 \uc644\ub8cc\ud569\ub2c8\ub2e4.</p>"},{"location":"mkdocs/gitlab_pages/#mkdocs-gitlab-repo","title":"mkdocs\uc6a9 GitLab repo \uc138\ud305","text":"<ol> <li>deargen-ai \uacc4\uc815\uc73c\ub85c \ub85c\uadf8\uc778\ud574\uc11c repo \ub9cc\ub4e4\uae30 (\uc608: deargen-ai/ppmi-docs)<ul> <li>\ud83d\udea8 deargen group\uc5d0 \ub9cc\ub4e4\uba74 \uc548\ub428! group \ud504\ub85c\uc81d\ud2b8\ub294 access token \uc0dd\uc131\uc774 \uc720\ub8cc \uacc4\uc815\ub9cc \uac00\ub2a5\ud568.</li> </ul> </li> <li> <p><code>gl-pages</code> branch\uc5d0 \ud574\ub2f9 \ud30c\uc77c <code>.gitlab-ci.yml</code> \uc73c\ub85c \ucee4\ubc0b</p> <ul> <li>\ucd9c\ucc98: https://gitlab.com/pages/plain-html</li> </ul> <pre><code>image: busybox\n\npages:\n  stage: deploy\n  script:\n    - echo \"The site will be deployed to $CI_PAGES_URL\"\n  artifacts:\n    paths:\n      - public\n  rules:\n    - if: $CI_COMMIT_BRANCH == \"gl-pages\"\n</code></pre> <p>\uc774\uc81c <code>public/</code> \ud3f4\ub354\uc5d0 \uc6f9\uc0ac\uc774\ud2b8 \ub123\uc73c\uba74 \ud398\uc774\uc9c0\uac00 \ud638\uc2a4\ud305 \ub428. \ubcf8 template\uc740 GitHub Actions\uac00 \uc790\ub3d9\uc73c\ub85c GitLab\uc73c\ub85c push\ud558\uc5ec document webpage\uac00 \uc0dd\uc131\ub428.</p> </li> <li> <p>GitLab \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c <code>Deploy -&gt; Pages -&gt; Use unique domain</code> \uccb4\ud06c \ud574\uc81c\ud574\uc57c URL\uc774 \uae54\ub054\ud558\uac8c \ub098\uc634.</p> </li> <li>\uae30\ubc00 \ubb38\uc11c\uac00 \uc544\ub2cc \uacbd\uc6b0, <code>Settings -&gt; General -&gt; Visibility (expand) -&gt; Pages -&gt; Everyone</code> \uc73c\ub85c \uc124\uc815\ud558\uba74 \uc804\uccb4 \uacf5\uac1c.</li> <li>\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c <code>Settings -&gt; Access Tokens -&gt; Add new token</code> \uc5d0\uc11c expiration 1\ub144 \ub4a4\ub85c \uc124\uc815, <code>write repository</code> scope, Maintainer role \uc124\uc815 \ud6c4 \ud1a0\ud070 \uc0dd\uc131<ul> <li>Maintainer\uac00 \uc544\ub2d0 \uacbd\uc6b0, \uae30\ubcf8 branch\ub294 protected branch\ub85c \uc124\uc815\ub418\uc5b4 push\ud558\uc9c0 \ubabb\ud560 \uc218 \uc788\uc74c. \uc544\ub2c8\uba74 developer\ub85c \uc124\uc815 \ud6c4 protected branch \ud574\uc9c0\ud558\uae30.</li> </ul> </li> <li>\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c <code>Manage -&gt; Members -&gt; Invite a group -&gt; deargen</code>\uc744 Guest\ub85c \ucd94\uac00\ud558\uba74 \ub514\uc5b4\uc820 \ubaa8\ub4e0 \ubd84\ub4e4\uc5d0\uac8c \uc77d\uae30 \uad8c\ud55c\uc774 \uc8fc\uc5b4\uc9d0.</li> </ol>"},{"location":"mkdocs/gitlab_pages/#github-repo","title":"GitHub repo \uc138\ud305","text":"<ol> <li>GitHub repo\ub85c \uac00\uc11c <code>Setting -&gt; Secrets and variables -&gt; Actions</code> \uc5d0\uc11c <code>New repository secret</code> \ucd94\uac00<ul> <li>Name: <code>GITLAB_TOKEN</code></li> <li>Secret: \uc704\uc5d0\uc11c \uc0dd\uc131\ud55c GitLab access token</li> </ul> </li> <li><code>Setting -&gt; Secrets and variables -&gt; Actions</code> \uc5d0\uc11c Variables \ud0ed\uc73c\ub85c \uac04 \ub4a4 <code>GITLAB_PROJECT</code>\ub97c \ucd94\uac00<ul> <li>Name: <code>GITLAB_PROJECT</code></li> <li>Value: GitLab docs repo \uc774\ub984 (\uc608: deargen-ai/ppmi-docs)</li> <li>\uc8fc\uc758: push\ud560 repo\uc758 \uc774\ub984\uc774\uace0 document URL\uc774 \uc544\ub2d8.</li> </ul> </li> </ol>"},{"location":"mkdocs/mkdocs/","title":"MkDocs \ubb38\uc11c \uc0dd\uc131","text":"<ul> <li>MkDocs: \ucf54\ub4dc\uc758 documentation\uc744 \ubaa8\uc544 \ubb38\uc11c\ud654\ud558\ub294 \ud504\ub85c\uadf8\ub7a8.</li> <li>mkdocs-material theme \uc0ac\uc6a9</li> <li>https://github.com/mkdocstrings/mkdocstrings repo\uc758 mkdocs.yml \ucc38\uace0\ud558\uba74 \uc88b\uc74c<ul> <li>\uacb0\uacfc \uc608\uc2dc https://mkdocstrings.github.io/</li> </ul> </li> </ul>"},{"location":"mkdocs/mkdocs/#project-layout","title":"Project layout \ubc0f \uc0ac\uc6a9\ubc95","text":"<pre><code>\ud83d\udcc4 mkdocs.yml   # The configuration file.\n\ud83d\udcc2 docs/\n\u2502 \u270f\ufe0f index.md    # The documentation homepage.\n\u2514 \u270f\ufe0f ...         # Other markdown pages, images and other files.\n</code></pre> <ol> <li>\ub9c8\ud06c\ub2e4\uc6b4 \ud615\uc2dd\uc73c\ub85c <code>docs/</code> \ud3f4\ub354 \ub0b4\uc5d0 \ubb38\uc11c \uc791\uc131.</li> <li><code>mkdocs.yml</code> \ud30c\uc77c\uc758 nav: \ud56d\ubaa9\uc744 \uc218\uc815\ud574 \ud398\uc774\uc9c0 \ucd94\uac00.</li> <li><code>mkdocs</code> \ud504\ub85c\uadf8\ub7a8\uc73c\ub85c \ubb38\uc11c \ubbf8\ub9ac\ubcf4\uae30<ul> <li><code>uv pip install -r deps/requirements_docs.txt</code> - mkdocs \ubc0f \ud50c\ub7ec\uadf8\uc778 \uc124\uce58</li> <li><code>mkdocs serve</code> - \ubb38\uc11c \ubbf8\ub9ac\ubcf4\uae30 (\uc218\uc815 \uc0ac\ud56d \uc989\uc2dc \ubc18\uc601)</li> </ul> </li> <li>GitHub Actions\ub97c \ud1b5\ud574 \uc790\ub3d9\uc73c\ub85c document \uc0dd\uc131 \ubc0f GitLab \ud638\uc2a4\ud305 (<code>.github/workflows/docs.yml</code>)<ul> <li>Mike \ud50c\ub7ec\uadf8\uc778\uc744 \uc774\uc6a9\ud574 \uc0dd\uc131\ub41c \ubb38\uc11c\uc758 \ubc84\uc804 \uad00\ub9ac\ud558\uac8c \ub418\uc5b4\uc788\uc74c. \uc5c6\uc73c\uba74 \ucd5c\uc2e0\ubc84\uc804 \ubb38\uc11c\ub9cc \ub098\uc634.</li> </ul> </li> </ol>"},{"location":"mkdocs/mkdocs/#markdown-examples","title":"Markdown Examples","text":""},{"location":"mkdocs/mkdocs/#code-annotation","title":"Code Annotation","text":""},{"location":"mkdocs/mkdocs/#with-a-title","title":"With a title","text":"bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"mkdocs/mkdocs/#with-line-numbers","title":"With line numbers","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"mkdocs/mkdocs/#highlighting-lines","title":"Highlighting lines","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"mkdocs/mkdocs/#icons-and-emojis","title":"Icons and Emojis","text":""},{"location":"mkdocs/mkdocs/#flow-chart-with-mermaid","title":"Flow Chart with Mermaid","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"mkdocs/mkdocstrings/","title":"\ud398\uc774\uc9c0\uc5d0 \uc18c\uc2a4\ucf54\ub4dc \uc124\uba85 \ucd94\uac00\ud558\uae30","text":""},{"location":"mkdocs/mkdocstrings/#_2","title":"\uc124\uba85\ud558\uace0 \uc2f6\uc740 \ubaa8\ub4c8/\ud568\uc218/\ud074\ub798\uc2a4\uac00 \uc788\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ub9c8\ud06c\ub2e4\uc6b4 \ud30c\uc77c\uc5d0 \uc801\uc73c\uba74 \ub429\ub2c8\ub2e4.","text":"<pre><code>::: mlproject.two_numbers.TwoNumbers\n    options:\n        show_root_heading: true\n</code></pre> <p>\ucd9c\ub825\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.</p>"},{"location":"mkdocs/mkdocstrings/#mlproject.two_numbers.TwoNumbers","title":"<code>mlproject.two_numbers.TwoNumbers</code>  <code>dataclass</code>","text":"<p>\uc815\uc218 \ub450 \uac1c \ub354\ud558\ub294 \ud074\ub798\uc2a4.</p> Source code in <code>src/mlproject/two_numbers.py</code> <pre><code>@dataclass\nclass TwoNumbers:\n    \"\"\"\uc815\uc218 \ub450 \uac1c \ub354\ud558\ub294 \ud074\ub798\uc2a4.\"\"\"\n\n    num_1: int\n    num_2: int\n\n    def add(self):\n        \"\"\"\n        Add two numbers together.\n\n        Examples:\n            &gt;&gt;&gt; TwoNumbers(1, 2).add()\n            3\n\n            &gt;&gt;&gt; TwoNumbers(1, -1).add()\n            0\n\n        Returns:\n            (int): The sum of the two numbers.\n\n        Note:\n            This function only supports integers.\n\n        Todo: You can put title here.\n            * Add support for floats.\n            * Add support for strings.\n        \"\"\"\n        assert isinstance(self.num_1, int)\n        assert isinstance(self.num_2, int)\n        return self.num_1 + self.num_2\n</code></pre>"},{"location":"mkdocs/mkdocstrings/#mlproject.two_numbers.TwoNumbers.add","title":"<code>add()</code>","text":"<p>Add two numbers together.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TwoNumbers(1, 2).add()\n3\n</code></pre> <pre><code>&gt;&gt;&gt; TwoNumbers(1, -1).add()\n0\n</code></pre> <p>Returns:</p> Type Description <code>int</code> <p>The sum of the two numbers.</p> Note <p>This function only supports integers.</p> You can put title here. <ul> <li>Add support for floats.</li> <li>Add support for strings.</li> </ul> Source code in <code>src/mlproject/two_numbers.py</code> <pre><code>def add(self):\n    \"\"\"\n    Add two numbers together.\n\n    Examples:\n        &gt;&gt;&gt; TwoNumbers(1, 2).add()\n        3\n\n        &gt;&gt;&gt; TwoNumbers(1, -1).add()\n        0\n\n    Returns:\n        (int): The sum of the two numbers.\n\n    Note:\n        This function only supports integers.\n\n    Todo: You can put title here.\n        * Add support for floats.\n        * Add support for strings.\n    \"\"\"\n    assert isinstance(self.num_1, int)\n    assert isinstance(self.num_2, int)\n    return self.num_1 + self.num_2\n</code></pre>"},{"location":"mkdocs/mkdocstrings/#submodule","title":"Submodule\uae4c\uc9c0 \uc804\ubd80 \ud3ec\ud568\ud558\uace0 \uc2f6\uc73c\uc2dc\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud569\ub2c8\ub2e4.","text":"<pre><code>::: mlproject\n    options:\n        show_root_heading: true\n        show_submodules: true\n</code></pre> <p>\ucd9c\ub825\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.</p>"},{"location":"mkdocs/mkdocstrings/#mlproject.health","title":"<code>health</code>","text":"<p>Check health of the installation.</p>"},{"location":"mkdocs/mkdocstrings/#mlproject.health.check_binaries","title":"<code>check_binaries()</code>","text":"<p>Check if binaries are installed.</p> Source code in <code>src/mlproject/health/__init__.py</code> <pre><code>def check_binaries():\n    \"\"\"Check if binaries are installed.\"\"\"\n    return True\n</code></pre>"},{"location":"mkdocs/mkdocstrings/#mlproject.health.check_env","title":"<code>check_env()</code>","text":"<p>Check environment variables.</p> Source code in <code>src/mlproject/health/__init__.py</code> <pre><code>def check_env():\n    \"\"\"Check environment variables.\"\"\"\n    ppmi_data_dir = os.environ.get(\"MLPROJECT_DATA_DIR\")\n\n    if ppmi_data_dir is None:\n        logger.warning(\n            \"\ud83e\udd12 Please set the environment variable MLPROJECT_DATA_DIR to the path of the data directory.\\n\"\n            f\"Otherwise, the default {DATA_DIR} will be used.\"\n        )\n        return False\n\n    logger.info(f\"\u2705 MLPROJECT_DATA_DIR is set to {ppmi_data_dir}\")\n    return True\n</code></pre>"},{"location":"mkdocs/mkdocstrings/#mlproject.health.__main__","title":"<code>__main__</code>","text":""},{"location":"mkdocs/mkdocstrings/#mlproject.health.font","title":"<code>font</code>","text":""},{"location":"mkdocs/mkdocstrings/#mlproject.health.font.verify_fonts_installed","title":"<code>verify_fonts_installed()</code>","text":"<p>This function verifies that the FiraCode font is installed because Rich Console.export_svg() uses it.</p> <p>Actually, the svg itself doesn't need the font but when we convert it to PDF using cairosvg, the font is needed.</p> Source code in <code>src/mlproject/health/font.py</code> <pre><code>def verify_fonts_installed():\n    \"\"\"\n    This function verifies that the FiraCode font is installed because Rich Console.export_svg() uses it.\n\n    Actually, the svg itself doesn't need the font but when we convert it to PDF using cairosvg, the font is needed.\n    \"\"\"\n    cmd = [\"fc-match\", \"FiraCode:style=Regular\"]\n    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]\n\n    if not output.decode(\"utf-8\").startswith(\"FiraCode-Regular\"):\n        raise FontNotInstalledError(\"FiraCode\")\n\n    cmd = [\"fc-match\", \"FiraCode:style=Bold\"]\n    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]\n\n    if not output.decode(\"utf-8\").startswith(\"FiraCode-Bold\"):\n        raise FontNotInstalledError(\"FiraCode\")\n</code></pre>"},{"location":"mkdocs/mkdocstrings/#mlproject.two_numbers","title":"<code>two_numbers</code>","text":""},{"location":"mkdocs/mkdocstrings/#mlproject.two_numbers.TwoNumbers","title":"<code>TwoNumbers</code>  <code>dataclass</code>","text":"<p>\uc815\uc218 \ub450 \uac1c \ub354\ud558\ub294 \ud074\ub798\uc2a4.</p> Source code in <code>src/mlproject/two_numbers.py</code> <pre><code>@dataclass\nclass TwoNumbers:\n    \"\"\"\uc815\uc218 \ub450 \uac1c \ub354\ud558\ub294 \ud074\ub798\uc2a4.\"\"\"\n\n    num_1: int\n    num_2: int\n\n    def add(self):\n        \"\"\"\n        Add two numbers together.\n\n        Examples:\n            &gt;&gt;&gt; TwoNumbers(1, 2).add()\n            3\n\n            &gt;&gt;&gt; TwoNumbers(1, -1).add()\n            0\n\n        Returns:\n            (int): The sum of the two numbers.\n\n        Note:\n            This function only supports integers.\n\n        Todo: You can put title here.\n            * Add support for floats.\n            * Add support for strings.\n        \"\"\"\n        assert isinstance(self.num_1, int)\n        assert isinstance(self.num_2, int)\n        return self.num_1 + self.num_2\n</code></pre>"},{"location":"mkdocs/mkdocstrings/#mlproject.two_numbers.TwoNumbers.add","title":"<code>add()</code>","text":"<p>Add two numbers together.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TwoNumbers(1, 2).add()\n3\n</code></pre> <pre><code>&gt;&gt;&gt; TwoNumbers(1, -1).add()\n0\n</code></pre> <p>Returns:</p> Type Description <code>int</code> <p>The sum of the two numbers.</p> Note <p>This function only supports integers.</p> You can put title here. <ul> <li>Add support for floats.</li> <li>Add support for strings.</li> </ul> Source code in <code>src/mlproject/two_numbers.py</code> <pre><code>def add(self):\n    \"\"\"\n    Add two numbers together.\n\n    Examples:\n        &gt;&gt;&gt; TwoNumbers(1, 2).add()\n        3\n\n        &gt;&gt;&gt; TwoNumbers(1, -1).add()\n        0\n\n    Returns:\n        (int): The sum of the two numbers.\n\n    Note:\n        This function only supports integers.\n\n    Todo: You can put title here.\n        * Add support for floats.\n        * Add support for strings.\n    \"\"\"\n    assert isinstance(self.num_1, int)\n    assert isinstance(self.num_2, int)\n    return self.num_1 + self.num_2\n</code></pre>"},{"location":"mkdocs/mkdocstrings/#mlproject.utils","title":"<code>utils</code>","text":""},{"location":"mkdocs/mkdocstrings/#mlproject.utils.setup_logging","title":"<code>setup_logging(console_level=default_log_level, output_files=None, file_levels=None)</code>","text":"<p>Setup logging with RichHandler and FileHandler.</p> <p>You should call this function at the beginning of your script.</p> <p>Parameters:</p> Name Type Description Default <code>console_level</code> <code>int | str</code> <p>Logging level for console. Defaults to INFO or env var MLPROJECT_LOG_LEVEL.</p> <code>default_log_level</code> <code>output_files</code> <code>list[str] | None</code> <p>List of output file paths, relative to LOG_DIR. If None, use default.</p> <code>None</code> <code>file_levels</code> <code>list[int] | None</code> <p>List of logging levels for each output file. If None, use default.</p> <code>None</code> Source code in <code>src/mlproject/utils/log.py</code> <pre><code>def setup_logging(\n    console_level: int | str = default_log_level,\n    output_files: list[str] | None = None,\n    file_levels: list[int] | None = None,\n):\n    \"\"\"\n    Setup logging with RichHandler and FileHandler.\n\n    You should call this function at the beginning of your script.\n\n    Args:\n        console_level: Logging level for console. Defaults to INFO or env var MLPROJECT_LOG_LEVEL.\n        output_files: List of output file paths, relative to LOG_DIR. If None, use default.\n        file_levels: List of logging levels for each output file. If None, use default.\n    \"\"\"\n    if output_files is None:\n        output_files = [\"{date:%Y%m%d-%H%M%S}-{name}-{levelname}-{version}.log\"]\n    if file_levels is None:\n        file_levels = [logging.INFO]\n\n    assert len(output_files) == len(\n        file_levels\n    ), \"output_files and file_levels must have the same length\"\n\n    # NOTE: Initialise with NOTSET level and null device, and add stream handler separately.\n    # This way, the root logging level is NOTSET (log all), and we can customise each handler's behaviour.\n    # If we set the level during the initialisation, it will affect to ALL streams,\n    # so the file stream cannot be more verbose (lower level) than the console stream.\n    logging.basicConfig(\n        format=\"\",\n        level=logging.NOTSET,\n        stream=open(os.devnull, \"w\"),  # noqa: SIM115\n    )\n\n    # If you want to suppress logs from other modules, set their level to WARNING or higher\n    # logging.getLogger('slowfast.utils.checkpoint').setLevel(logging.WARNING)\n\n    console_handler = RichHandler(\n        level=console_level,\n        show_time=True,\n        show_level=True,\n        show_path=True,\n        rich_tracebacks=True,\n        tracebacks_show_locals=True,\n    )\n    console_format = logging.Formatter(\n        fmt=\"%(name)s - %(message)s\",\n        datefmt=\"%m/%d %H:%M:%S\",\n    )\n    console_handler.setFormatter(console_format)\n\n    f_format = logging.Formatter(\n        fmt=\"%(asctime)s - %(name)s: %(lineno)4d - %(levelname)s - %(message)s\",\n        datefmt=\"%y/%m/%d %H:%M:%S\",\n    )\n\n    function_caller_module = inspect.getmodule(inspect.stack()[1][0])\n    if function_caller_module is None:\n        name_or_path = \"unknown\"\n    elif function_caller_module.__name__ == \"__main__\":\n        if function_caller_module.__file__ is None:\n            name_or_path = function_caller_module.__name__\n        else:\n            name_or_path = function_caller_module.__file__.replace(\n                str(PROJECT_DIR) + \"/\", \"\"\n            ).replace(\"/\", \".\")\n            # Remove .py extension\n            name_or_path = Path(name_or_path).with_suffix(\"\")\n\n    else:\n        name_or_path = function_caller_module.__name__\n\n    log_path_map = {\n        \"name\": name_or_path,\n        \"version\": __version__,\n        \"date\": datetime.now(timezone.utc),\n    }\n\n    root_logger = logging.getLogger()\n    root_logger.addHandler(console_handler)\n\n    log_paths = []\n    for output_file, file_level in zip(output_files, file_levels, strict=True):\n        log_path_map[\"levelname\"] = logging.getLevelName(file_level)\n        log_path = LOG_DIR / output_file.format_map(log_path_map)\n        log_path.parent.mkdir(parents=True, exist_ok=True)\n\n        f_handler = logging.FileHandler(log_path)\n        f_handler.setLevel(file_level)\n        f_handler.setFormatter(f_format)\n\n        # Add handlers to the logger\n        root_logger.addHandler(f_handler)\n\n    logger.info(f\"mlproject {__version__}\")\n\n    for log_path in log_paths:\n        logger.info(f\"Logging to {log_path}\")\n</code></pre>"},{"location":"mkdocs/mkdocstrings/#_3","title":"\uc18c\uc2a4\ucf54\ub4dc\ub9cc \ucd9c\ub825\ud558\uace0 \uc2f6\uc73c\uc2dc\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud569\ub2c8\ub2e4.","text":"<pre><code>::: mlproject.two_numbers.TwoNumbers\n    options:\n        show_docstring_attributes: false\n        show_docstring_functions: false\n        show_docstring_classes: false\n        show_docstring_modules: false\n        show_docstring_description: false\n        show_docstring_examples: false\n        show_docstring_other_parameters: false\n        show_docstring_parameters: false\n        show_docstring_raises: false\n        show_docstring_receives: false\n        show_docstring_returns: false\n        show_docstring_warns: false\n        show_docstring_yields: false\n        members: false\n        show_bases: false\n        show_source: true\n</code></pre> <p>\ucd9c\ub825\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.</p> Source code in <code>src/mlproject/two_numbers.py</code> <pre><code>@dataclass\nclass TwoNumbers:\n    \"\"\"\uc815\uc218 \ub450 \uac1c \ub354\ud558\ub294 \ud074\ub798\uc2a4.\"\"\"\n\n    num_1: int\n    num_2: int\n\n    def add(self):\n        \"\"\"\n        Add two numbers together.\n\n        Examples:\n            &gt;&gt;&gt; TwoNumbers(1, 2).add()\n            3\n\n            &gt;&gt;&gt; TwoNumbers(1, -1).add()\n            0\n\n        Returns:\n            (int): The sum of the two numbers.\n\n        Note:\n            This function only supports integers.\n\n        Todo: You can put title here.\n            * Add support for floats.\n            * Add support for strings.\n        \"\"\"\n        assert isinstance(self.num_1, int)\n        assert isinstance(self.num_2, int)\n        return self.num_1 + self.num_2\n</code></pre> <p>\ub354 \uc790\uc138\ud55c \uc124\uba85\uc740 mkdocstrings\ub97c \ucc38\uace0\ud558\uc138\uc694.</p>"},{"location":"mkdocs/mkdocstrings/#heading-level","title":"\ubaa9\ucc28\uc5d0\uc11c Heading level\uc744 \ubc14\uafb8\uace0 \uc2f6\ub2e4\uba74 \ub9c8\ud06c\ub2e4\uc6b4\ucc98\ub7fc #\uc744 \uc4f0\uc2dc\uba74 \ub429\ub2c8\ub2e4.","text":"<pre><code>### ::: mlproject.two_numbers.TwoNumbers\n    options:\n        show_docstring_description: false\n        show_docstring_examples: false\n        members: false\n        show_bases: false\n        show_source: true\n</code></pre> <p>\ucd9c\ub825\uc740 \uc0dd\ub7b5.</p>"},{"location":"mkdocs/mkdocstrings/#_4","title":"\ubb38\uc81c \uc0ac\ud56d \ud574\uacb0","text":"<p>\ub2e4\uc74c\uacfc \uac19\uc740 \uc5d0\ub7ec\uac00 \ub0a0 \uacbd\uc6b0, \ud30c\uc774\uc36c \ubaa8\ub4c8\uc744 \ucc3e\uc9c0 \ubabb\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.</p> <pre><code>\ud83d\udd59 18:14:24 \u276f mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\nERROR   -  mkdocstrings: ppmi.pymol_visulize.pymol_plugin could not be found\nERROR   -  Error reading page 'reference/ppmi/pymol_visulize/pymol_plugin/index.md':\nERROR   -  Could not collect 'ppmi.pymol_visulize.pymol_plugin'\n</code></pre> <p>Solution: \uac01 \ud3f4\ub354\uc5d0 <code>__init__.py</code> \ud30c\uc77c\uc744 \ub9cc\ub4dc\uc138\uc694. <code>scripts/gen_init_py.py</code> \ud30c\uc77c\uc744 \uc2e4\ud589\ud558\uba74 \ub429\ub2c8\ub2e4.</p>"},{"location":"python/configuration/","title":"\ubcf5\uc7a1\ud55c \ud504\ub85c\uc81d\ud2b8 configuration \uba85\ud655\ud558\uac8c \ud558\uae30","text":"<p>Configuration\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \ubc29\uc2dd\uc774 \ub110\ub9ac \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</p> <ol> <li>argparse</li> <li>yaml</li> </ol> <p>\uadf8\ub7ec\ub098, \ub450 \ubc29\ubc95 \ubaa8\ub450 \ub2e8\uc810\uc774 \uc788\uc73c\uba70 \ud574\ub2f9 \ubb38\uc11c\uc5d0\uc11c\ub294 \ub2e8\uc810\uacfc \uac1c\uc778\uc801\uc778 workflow\ub97c \ud574\uacb0\ucc45\uc73c\ub85c\uc368 \uc81c\uc2dc\ud569\ub2c8\ub2e4.</p>"},{"location":"python/configuration/#tldr","title":"TL;DR","text":"<p>dataclass \uc194\ub8e8\uc158</p>"},{"location":"python/configuration/#config","title":"\uc88b\uc740 config \uc2dc\uc2a4\ud15c","text":"<p>Configuration style\uc740 \ud504\ub85c\uc81d\ud2b8\ub9c8\ub2e4 \ub2e4\ub974\uace0 \ubc29\uc2dd\uc740 \ub2e4\uc591\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ube60\ub974\uac8c \ub2e4\uc591\ud55c hyperparameter\ub85c \uc2e4\ud5d8\uc744 \ud574\ubd10\uc57c \ud558\ub294 \uc5f0\uad6c \ucf54\ub4dc\uc5d0\uc11c \uc88b\uc740 configuration \uc2dc\uc2a4\ud15c\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. (\ud544\uc790\uc758 \uc815\uc758)</p> <ol> <li>typing\uacfc default \uac12\uc744 \uc27d\uac8c \ucd94\uc801\uc774 \uac00\ub2a5\ud568</li> <li>\uc0ac\uc6a9\ubc95\uacfc parameter \uc885\ub958, \uac12 \ub4f1\uc774 \uc608\uce21\ud558\uae30 \uc26c\uc6cc\uc57c \ud568.</li> <li>\ubcf5\uc7a1\ud55c dependency\uac00 \uc788\ub294\uac83 \ubcf4\ub2e8 \uac04\ub2e8\uba85\ub8cc\ud574\uc11c maintain\ud558\uae30 \uc26c\uc6cc\uc57c \ud568.</li> </ol>"},{"location":"python/configuration/#config_1","title":"\ub098\uc05c config \uc2dc\uc2a4\ud15c","text":"<ol> <li>\ubcc0\uc218\ub4e4\uc774 \uc77d\uc5b4\ub4e4\uc774\ub294 \ud30c\uc77c\uc5d0 \ub530\ub77c dynamic\ud558\uac8c \uc0dd\uc131\ub418\uc5b4 \ucf54\ub4dc\ub97c \ubcf4\uba70 \ub530\ub77c\uac00\uae30 \ub108\ubb34 \ud798\ub4e4\uace0 \uc2e4\ud589\uc744 \ud574\ubd10\uc57c \uc54c \uc218 \uc788\ub294 \uacbd\uc6b0.</li> <li>\ub108\ubb34 \uc2ec\ud558\uac8c generalisation\uc744 \ud558\ub824\uace0 \ud574\uc11c, \uc2e4\ud589\ud558\ub824\ub294 \ud234(<code>train.py</code>, <code>eval.py</code> \ub4f1)\uc5d0 \ub530\ub77c \ud544\uc694\ud55c \ud30c\ub77c\uba54\ud130\uac00 \ub2e4\ub978\ub370\ub3c4 \ubd88\uad6c\ud558\uace0 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\uac83\uc774 \ub108\ubb34 \ub9ce\uc774 \ud3ec\ud568 \ub3fc \uc54c\uae30 \uc5b4\ub824\uc6b4 \uacbd\uc6b0.</li> <li>\ubaa8\ub4e0 \ud30c\uc77c\uc774 config \uc2dc\uc2a4\ud15c\uacfc \uc5f0\ub3d9\ub418\uc5b4\uc788\uc5b4 \ub2e4\ub978 \ud30c\uc77c/\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc77c\ubd80 \ubaa8\ub4c8\ub9cc \uc27d\uac8c \uac00\uc838\ub2e4 \uc4f0\uae30 \uc5b4\ub824\uc6b4 \uacbd\uc6b0.</li> </ol>"},{"location":"python/configuration/#argparse-sanitise","title":"\ub098\uc05c \uc608\uc2dc (argparse \ud6c4 sanitise \ud558\ub294 \ubc29\uc2dd)","text":"<p>kohya_ss/library/config_util.py</p> <p>main\uc744 \ubcf4\uba74, \uba87 \uac00\uc9c0 parameter\ub97c argparse\uc5d0 \ub123\uc73c\uba74 \uadf8\uc5d0 \ub9de\uac8c config sanitisation \ub4f1\uc744 \ud558\uace0 \uadf8 \uacb0\uacfc\ub97c \ubc14\ud0d5\uc73c\ub85c \ub610 \ud55c\ubc88 processing\uc744 \ud574\uc11c BlueprintGenerator\ub77c\ub294 \uc774\uc0c1\ud55c\uac78 \ub9cc\ub4e6.</p> <ol> <li>ConfigSanitizer\uc640 BlueprintGenerator\uac00 \ub108\ubb34 \ucd94\uc0c1\uc801\uc774\uace0 dynamic\ud574\uc11c \uc5b4\ub5a4 \uac12\uc774 \ub098\uc62c\uc9c0 \uc2e4\ud589 \uc804\uc5d0\ub294 \uc804\ud600 \uc608\uc0c1\uc774 \uc548\ub428. (\ucf54\ub4dc \uc77d\uc5b4\ubcf4\uae30)<ul> <li>\ucf54\ub4dc\uc5d0\uc11c \uc5c6\ub294 \ubcc0\uc218\ub97c \uc368\uc11c \uc624\ub958\uac00 \ub0a0 \uc218 \uc788\uc74c.</li> <li>\ubcc0\uc218\uc758 type\uc774\ub098 \uac12\uc774 \uc5b4\ub5bb\uac8c \uc0dd\uacbc\ub294\uc9c0 \uc54c \uc218\uac00 \uc5c6\uc74c.</li> <li>\ub9cc\uc57d \uc608\uc0c1\ub418\ub294 \uac12\ub4e4\uc774 \uc788\ub2e4\uace0 \ud574\ub3c4, \uadf8 \uac12\uc758 default\uac00 \ubb34\uc5c7\uc778\uc9c0 \uc27d\uac8c Pylance\ub85c \ucc3e\uae30 \ud798\ub4e6. \ud574\ub2f9 default\uac00 \uc815\uc758\ub41c \ud30c\uc77c\uc744 \ucc3e\uc544\uac00\uc57c\ud568.</li> </ul> </li> <li>\ub108\ubb34 \ub9ce\uc740 \uac12\uc744 command line\uc5d0 \ub123\uc5b4\uc57c \ud574\uc11c \uc258 \uc2a4\ud06c\ub9bd\ud2b8\uac00 \ubcf5\uc7a1\ud574\uc9d0.     <pre><code># \uc548 \uc88b\uc740 \uc608\uc2dc\npython train_dreambooth.py \\\n    --pretrained_model_name_or_path=$MODEL_NAME  \\\n    --instance_data_dir=$INSTANCE_DIR \\\n    --class_data_dir=$CLASS_DIR \\\n    --output_dir=$OUTPUT_DIR \\\n    --with_prior_preservation --prior_loss_weight=1.0 \\\n    --instance_prompt=\"a photo of sks dog\" \\\n    --class_prompt=\"a photo of dog\" \\\n    --resolution=512 \\\n    --train_batch_size=1 \\\n    --gradient_accumulation_steps=1 --gradient_checkpointing \\\n    --use_8bit_adam \\\n    --enable_xformers_memory_efficient_attention \\\n    --set_grads_to_none \\\n    --learning_rate=2e-6 \\\n    --lr_scheduler=\"constant\" \\\n    --lr_warmup_steps=0 \\\n    --num_class_images=200 \\\n    --max_train_steps=800 \\\n    --push_to_hub\n</code></pre></li> <li>\uc911\uac04\uc758 command-line argument\ub97c \uc9c0\uc6b0\uba74 \ud504\ub85c\uadf8\ub7a8\uc774 \ub3d9\uc791\ud558\uc9c0 \uc54a\uac70\ub098 \uc774\ud6c4 argument\ub4e4\uc774 \ubb34\uc2dc\ub418\ub294 \uacbd\uc6b0\uac00 \uc788\uc74c.</li> </ol>"},{"location":"python/configuration/#2-yaml","title":"\ub098\uc05c \uc608\uc2dc 2 (yaml \ubc29\uc2dd)","text":"<p>SlowFast/slowfast/datasets/imagenet.py</p> <p>SlowFast/configs/AVA/SLOWFAST_32x2_R50_SHORT.yaml</p> <ol> <li>hard-coding \ub41c \uac12\uc774 \ub9ce\uc544\uc11c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uac74\uc9c0 \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6c0 (\uae34 \ub9ac\uc2a4\ud2b8\uac00 \uc788\ub294\ub370 \ubb34\uc2a8 \uac12\uc744 \uc758\ubbf8\ud558\ub294\uc9c0?)</li> <li>\uac12\ub4e4\uc774 dependency\uac00 \ub9ce\uc544\uc11c \uc81c\ub300\ub85c \uc774\ud574\ud558\uc9c0 \uc54a\uc73c\uba74 \uc624\ub958\ub098\uae30 \uc26c\uc6c0 (\uc608: LOCATION, GROUP, POOL\uc740 list \uae38\uc774\uac00 \uac19\uc544\uc57c \ud568.)</li> </ol>"},{"location":"python/configuration/#dataclass","title":"\uc800 \ub9cc\uc758 \uc194\ub8e8\uc158 (dataclass)","text":"<p>\uc0ac\uc6a9\ubc95\uc744 \uba3c\uc800 \ubcf4\uc5ec\ub4dc\ub9ac\uc790\uba74, </p> <p>BaseConfig \uc0ac\uc6a9\ubc95 \uc608: BaseConfig\ub97c inherit\ud574\uc11c \ubcc0\uc218, \ud0c0\uc785, default\uac12\uc744 \uc801\uc73c\uba74 \ub429\ub2c8\ub2e4.</p> <p><code>envvar_prefix</code> \ud568\uc218\ub97c override\ud574\uc11c \ud658\uacbd\ubcc0\uc218 prefix\ub97c \uc815\uc758\ud558\uace0, \ud658\uacbd\ubcc0\uc218\ub97c \uc774\uc6a9\ud574 \ubaa8\ub4e0 \uac12\uc744 \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> Source code in <code>src/mlproject/utils/config.py</code> <pre><code>@dataclass\nclass ExampleConfig(BaseConfig):\n    \"\"\"\n    BaseConfig \uc0ac\uc6a9\ubc95 \uc608: BaseConfig\ub97c inherit\ud574\uc11c \ubcc0\uc218, \ud0c0\uc785, default\uac12\uc744 \uc801\uc73c\uba74 \ub429\ub2c8\ub2e4.\n\n    `envvar_prefix` \ud568\uc218\ub97c override\ud574\uc11c \ud658\uacbd\ubcc0\uc218 prefix\ub97c \uc815\uc758\ud558\uace0,\n    \ud658\uacbd\ubcc0\uc218\ub97c \uc774\uc6a9\ud574 \ubaa8\ub4e0 \uac12\uc744 \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n    Examples:\n        &gt;&gt;&gt; cfg = ExampleConfig()\n        &gt;&gt;&gt; cfg\n        ExampleConfig(train_batch_size=1, alpha=None)\n\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; os.environ['MLCONFIG_train_batch_size'] = '2'\n        &gt;&gt;&gt; ExampleConfig()\n        ExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\n        ExampleConfig(train_batch_size=2, alpha=None)\n\n        &gt;&gt;&gt; os.environ['MLCONFIG_alpha'] = '0.5'\n        &gt;&gt;&gt; ExampleConfig()\n        ExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\n        ExampleConfig: Updating alpha from env var MLCONFIG_alpha=0.5 as type &lt;class 'float'&gt;\n        ExampleConfig(train_batch_size=2, alpha=0.5)\n\n        &gt;&gt;&gt; # Setting alpha to None with the string \"None\"\n        &gt;&gt;&gt; os.environ['MLCONFIG_alpha'] = 'None'\n        &gt;&gt;&gt; ExampleConfig()\n        ExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\n        ExampleConfig: Updating alpha from env var MLCONFIG_alpha=None as NoneType\n        ExampleConfig(train_batch_size=2, alpha=None)\n\n        &gt;&gt;&gt; # Undefined name in environment variable. Maybe a typo?\n        &gt;&gt;&gt; os.environ['MLCONFIG_unknown'] = '1'\n        &gt;&gt;&gt; ExampleConfig()\n        Traceback (most recent call last):\n         ...\n        ValueError: Unknown environment variable MLCONFIG_unknown=1\n    \"\"\"\n\n    train_batch_size: int = 1\n    alpha: float | None = None\n\n    @property\n    def envvar_prefix(self) -&gt; str:\n        return \"MLCONFIG_\"\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cfg = ExampleConfig()\n&gt;&gt;&gt; cfg\nExampleConfig(train_batch_size=1, alpha=None)\n</code></pre> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.environ['MLCONFIG_train_batch_size'] = '2'\n&gt;&gt;&gt; ExampleConfig()\nExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\nExampleConfig(train_batch_size=2, alpha=None)\n</code></pre> <pre><code>&gt;&gt;&gt; os.environ['MLCONFIG_alpha'] = '0.5'\n&gt;&gt;&gt; ExampleConfig()\nExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\nExampleConfig: Updating alpha from env var MLCONFIG_alpha=0.5 as type &lt;class 'float'&gt;\nExampleConfig(train_batch_size=2, alpha=0.5)\n</code></pre> <pre><code>&gt;&gt;&gt; # Setting alpha to None with the string \"None\"\n&gt;&gt;&gt; os.environ['MLCONFIG_alpha'] = 'None'\n&gt;&gt;&gt; ExampleConfig()\nExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\nExampleConfig: Updating alpha from env var MLCONFIG_alpha=None as NoneType\nExampleConfig(train_batch_size=2, alpha=None)\n</code></pre> <pre><code>&gt;&gt;&gt; # Undefined name in environment variable. Maybe a typo?\n&gt;&gt;&gt; os.environ['MLCONFIG_unknown'] = '1'\n&gt;&gt;&gt; ExampleConfig()\nTraceback (most recent call last):\n ...\nValueError: Unknown environment variable MLCONFIG_unknown=1\n</code></pre> <p>BaseConfig \uc18c\uc2a4\ucf54\ub4dc: </p> Source code in <code>src/mlproject/utils/config.py</code> <pre><code>@dataclass\nclass BaseConfig:\n    @property\n    def envvar_prefix(self) -&gt; str:\n        return \"MLCONFIG_\"\n\n    def __post_init__(self):\n        self.verify_unknown_env_vars()\n        self.update_based_on_env_vars()\n        self.confirm_validity()\n\n    def update_based_on_env_vars(self):\n        import os\n        from dataclasses import fields\n        from types import NoneType, UnionType\n        from typing import get_args, get_origin\n\n        from rich.console import Console\n\n        # NOTE: without soft wrapping, it will line break depending on the width of the terminal.\n        # Which may cause the failure of the doctest.\n        console = Console(soft_wrap=True)\n\n        # for key, value in asdict(self).items():\n        for class_field in fields(self):\n            key = class_field.name\n            vartype = class_field.type\n\n            env_var = os.getenv(f\"{self.envvar_prefix}{key}\")\n            if env_var:\n                if get_origin(vartype) is UnionType:\n                    # If the type is Union, we use the first type\n                    # unless the value is None.\n                    if NoneType in get_args(vartype) and env_var == \"None\":\n                        setattr(self, key, None)\n\n                        console.print(\n                            f\"{type(self).__name__}: Updating {key} from env var \"\n                            f\"{self.envvar_prefix}{key}=None as NoneType\"\n                        )\n                    else:\n                        self._set_value_as_type(key, env_var, get_args(vartype)[0])\n                else:\n                    self._set_value_as_type(key, env_var, vartype)\n\n        # Handle the local rank.\n        env_local_rank = int(os.environ.get(\"LOCAL_RANK\", -1))\n        if env_local_rank != -1 and env_local_rank != self.local_rank:\n            self.local_rank = env_local_rank\n\n    def _set_value_as_type(self, key, value: str, vartype):\n        \"\"\"Set the string value as the given type.\"\"\"\n        import ast\n        from typing import get_origin\n\n        from rich.console import Console\n\n        if get_origin(vartype) is list:\n            setattr(self, key, ast.literal_eval(value))\n            assert isinstance(\n                getattr(self, key), vartype\n            ), f\"{type(self).__name__}.{key} has to be {vartype} but got {type(getattr(self, key))}\"\n        elif vartype is bool:\n            if value == \"True\":\n                setattr(self, key, True)\n            elif value == \"False\":\n                setattr(self, key, False)\n            else:\n                raise ValueError(\n                    f\"{type(self).__name__}: Unknown boolean value for {key}={value} trying to update from env var\"\n                )\n        else:\n            setattr(self, key, vartype(value))\n\n        console = Console(soft_wrap=True)\n        console.print(\n            f\"{type(self).__name__}: Updating {key} from env var \"\n            f\"{self.envvar_prefix}{key}={value} as type {vartype}\"\n        )\n\n    def print_fields(self):\n        from dataclasses import fields\n\n        from rich.console import Console\n\n        console = Console(soft_wrap=True)\n\n        console.print(f\"{type(self).__name__}: Fields:\")\n        for fld in fields(self):\n            console.print(f\"{fld.name}: {fld.type} = {fld.default!r}\")\n\n    def verify_unknown_env_vars(self):\n        import os\n        from dataclasses import asdict\n\n        # os.environ.keys() is always uppercase\n        for name, value in os.environ.items():\n            keys_lower = [k.lower() for k in asdict(self)]\n            if (\n                name.startswith(self.envvar_prefix)\n                and name[len(self.envvar_prefix) :].lower() not in keys_lower\n            ):\n                print(f\"ERROR while updating from env var {name}\")\n                print(\"Possible values are:\")\n                print()\n                self.print_fields()\n                raise ValueError(f\"Unknown environment variable {name}={value}\")\n\n    def confirm_validity(self):\n        pass\n</code></pre>"},{"location":"python/configuration/#_1","title":"\uc7a5\uc810","text":"<ol> <li>\uac04\ub2e8 \uba85\ub8cc\ud55c dataclass\ub97c \ub9cc\ub4e4\uc5b4 typing \ubc0f default \uac12 pylance\uc758 go to definition \uae30\ub2a5\uc73c\ub85c \ud655\uc778\ud558\uae30 \uc88b\uc74c.</li> <li>\ubcc0\uacbd\ud558\uace0\uc790 \ud558\ub294 \ubcc0\uc218\ub4e4\uc740 \ud658\uacbd\ubcc0\uc218\ub97c \uc774\uc6a9\ud574 \ubcc0\uacbd \uac00\ub2a5.</li> <li>\ubcc0\uacbd\ub41c \ubcc0\uc218\ub4e4\uc740 \ub530\ub85c print \ud574\ub193\uc544\uc11c, \uc815\ub9d0 \uc2e4\ud5d8\uc5d0 \uc911\uc694\ud55c \uc810\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc27d\uac8c \ud655\uc778 \uac00\ub2a5.<ul> <li>\ub9cc\uc57d 100\uac1c\uc758 parameter\uac00 \uadf8\ub0e5 \ucd9c\ub825\ub41c\ub2e4\uba74 \uc5b4\ub5a4 \ubaa9\uc801\uc73c\ub85c \uc2e4\ud5d8\uc744 \ub3cc\ub9b0\uac83\uc778\uc9c0 \ud655\uc778\ud558\uae30 \uc5b4\ub824\uc6c0.</li> </ul> </li> <li>\ucd94\uac00 \uae30\ub2a5\uc740 method \ub354 \ub9cc\ub4e4\uc5b4 <code>__post_init__</code>\uc5d0 \ub123\uc73c\uba74 \ub428. \ud655\uc7a5\uc774 \ud3b8\ub9ac.</li> <li>\uc5c6\ub294 \ubcc0\uc218\ub97c \uc218\uc815\ud558\uace0\uc790 \ud55c \uacbd\uc6b0 \uc5d0\ub7ec \ubc1c\uc0dd\ud574 \uc624\ud0c0 \ub4f1 \uc2e4\uc218 \ubc29\uc9c0.</li> <li>\uc258 \uc2a4\ud06c\ub9bd\ud2b8 \uc791\uc131\uc774 \uac04\ud3b8\ud574\uc9d0. \ud2b9\ud788 \ub9ce\uc740 parameter \ubcc0\ub3d9\uc774 \uc788\uc744 \ub54c \ucee8\ud2b8\ub864\uc774 \ube60\ub984.     <pre><code># \uc88b\uc740 \uc608\uc2dc\nfor batch_size in {1..3}; do\n    export MLCONFIG_batch_size=$batch_size\n    for lr in {1..3}; do\n        export MLCONFIG_lr=$lr\n        for iter in {1..3}; do\n            export MLCONFIG_iter=$iter\n            python train.py  # argparse\ucc98\ub7fc command\uac00 \ubcf5\uc7a1\ud574\uc9c0\uc9c0 \uc54a\uc74c.\n        done\n    done\ndone\n</code></pre></li> </ol>"},{"location":"python/configuration/#argparse","title":"argparse \uc4f0\ub294\uac8c \uc88b\uc740 \uacbd\uc6b0","text":"<p>\uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, argparse\ub97c \uc4f0\ub294\uac83\uc774 \ub098\uc740 \uc0c1\ud669\ub3c4 \ub9ce\uc2b5\ub2c8\ub2e4.</p> <ol> <li>\ubcc0\uc218 \uac1c\uc218\uac00 \uba87 \uac1c \uc5c6\uace0 typing\ub3c4 \uc774\ub984\ub9cc\uc73c\ub85c \uba85\ud655\ud558\uac8c \uc54c \uc218 \uc788\uc5b4\uc11c \ud070 \uac71\uc815\uc774 \uc548\ub418\ub294 \uacbd\uc6b0</li> </ol>"},{"location":"python/logging/","title":"Python logging \ubaa8\ub4c8","text":"<p><code>print()</code> \uc4f0\uc9c0 \ub9c8\uc138\uc694. \uc774\uc81c\ubd80\ud130 <code>logger.info()</code>\ub85c \ub300\uccb4\ud558\uc138\uc694.</p> <p>Why?</p> <ul> <li>\uc5b4\ub5a4 \ubaa8\ub4c8, \uc5b4\ub5a4 \ub77c\uc778\uc5d0\uc11c \ubc1c\uc0dd\ud55c \uba54\uc2dc\uc9c0\uc778\uc9c0 \uc190\uc27d\uac8c \ucd94\uc801\uc774 \ub428</li> <li>\uc6d0\ud558\ub294 LEVEL (DEBUG, INFO, WARNING, ERROR, CRITICAL)\uc744 \uc120\ud0dd\ud574 \ucd9c\ub825 \uac00\ub2a5</li> <li>\uc6d0\ud558\ub294 \ubaa8\ub4c8\uc744 \uc120\ud0dd\uc801\uc73c\ub85c \ucd9c\ub825 \uac00\ub2a5</li> <li>\uc190\uc26c\uc6b4 handler \ucd94\uac00<ul> <li>\ucf58\uc194\uc5d0 \ucd9c\ub825</li> <li>\ud30c\uc77c\ub85c \ucd9c\ub825</li> <li>\uc678\ubd80 \ud504\ub85c\uadf8\ub7a8\uc5d0 \ub85c\uadf8 \ub118\uae30\uae30</li> </ul> </li> </ul>"},{"location":"python/logging/#_1","title":"\uc0ac\uc6a9\ubc95","text":"<p>\ub85c\uae45 \uc138\ud305\uc740 \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \uc2dc \uc81c\uc77c \ucc98\uc74c \ud55c\ubc88\ub9cc \ud569\ub2c8\ub2e4. \ub2e4\ub978 \ubaa8\ub4c8\uc5d0\uc11c\ub294 \uadf8\ub0e5 logger\ub97c \uc0ac\uc6a9\ud558\uae30\ub9cc \ud569\ub2c8\ub2e4.</p>"},{"location":"python/logging/#src-import","title":"<code>src/</code> \uc548\uc5d0 \uc788\ub294 import \ub418\ub294 \ubaa8\ub4c8\uc778 \uacbd\uc6b0","text":"<pre><code>import logging\n\nlogger = logging.getLogger(__name__)\n\ndef foo():\n    # print(\"Do not use print statements\")\n    logger.info(\"Use logging instead!\")\n</code></pre>"},{"location":"python/logging/#tools","title":"<code>tools/</code> \uc548\uc5d0 \uc788\ub294 \uc2e4\ud589\ud30c\uc77c\uc778 \uacbd\uc6b0","text":"<p><code>tools/examples/color_logging_main.py</code> \ud30c\uc77c\uc744 template\uc73c\ub85c \uc0ac\uc6a9.</p> tools/examples/color_logging_main.py<pre><code>import rich.traceback\n\nrich.traceback.install(show_locals=True)\n\nimport logging\n\nfrom mlproject.utils import setup_logging\n\nlogger = logging.getLogger(__name__)\n\n\ndef main():\n    logger.info(\"This is an info message\")\n    raise Exception(\"This is an exception\")\n\n\nif __name__ == \"__main__\":\n    try:\n        setup_logging()\n        main()\n    except Exception:\n        logger.exception(\"Exception occurred\")\n</code></pre>"},{"location":"python/logging/#setup_logging","title":"setup_logging() \ud568\uc218","text":"<p>\ubcf8 template\uc5d0\uc11c\ub294 logging\uc744 \uc27d\uac8c \uc124\uc815\ud560 \uc218 \uc788\ub294 \ud568\uc218\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.</p>"},{"location":"python/logging/#mlproject.utils.setup_logging","title":"<code>mlproject.utils.setup_logging(console_level=default_log_level, output_files=None, file_levels=None)</code>","text":"<p>Setup logging with RichHandler and FileHandler.</p> <p>You should call this function at the beginning of your script.</p> <p>Parameters:</p> Name Type Description Default <code>console_level</code> <code>int | str</code> <p>Logging level for console. Defaults to INFO or env var MLPROJECT_LOG_LEVEL.</p> <code>default_log_level</code> <code>output_files</code> <code>list[str] | None</code> <p>List of output file paths, relative to LOG_DIR. If None, use default.</p> <code>None</code> <code>file_levels</code> <code>list[int] | None</code> <p>List of logging levels for each output file. If None, use default.</p> <code>None</code> Source code in <code>src/mlproject/utils/log.py</code> <pre><code>def setup_logging(\n    console_level: int | str = default_log_level,\n    output_files: list[str] | None = None,\n    file_levels: list[int] | None = None,\n):\n    \"\"\"\n    Setup logging with RichHandler and FileHandler.\n\n    You should call this function at the beginning of your script.\n\n    Args:\n        console_level: Logging level for console. Defaults to INFO or env var MLPROJECT_LOG_LEVEL.\n        output_files: List of output file paths, relative to LOG_DIR. If None, use default.\n        file_levels: List of logging levels for each output file. If None, use default.\n    \"\"\"\n    if output_files is None:\n        output_files = [\"{date:%Y%m%d-%H%M%S}-{name}-{levelname}-{version}.log\"]\n    if file_levels is None:\n        file_levels = [logging.INFO]\n\n    assert len(output_files) == len(\n        file_levels\n    ), \"output_files and file_levels must have the same length\"\n\n    # NOTE: Initialise with NOTSET level and null device, and add stream handler separately.\n    # This way, the root logging level is NOTSET (log all), and we can customise each handler's behaviour.\n    # If we set the level during the initialisation, it will affect to ALL streams,\n    # so the file stream cannot be more verbose (lower level) than the console stream.\n    logging.basicConfig(\n        format=\"\",\n        level=logging.NOTSET,\n        stream=open(os.devnull, \"w\"),  # noqa: SIM115\n    )\n\n    # If you want to suppress logs from other modules, set their level to WARNING or higher\n    # logging.getLogger('slowfast.utils.checkpoint').setLevel(logging.WARNING)\n\n    console_handler = RichHandler(\n        level=console_level,\n        show_time=True,\n        show_level=True,\n        show_path=True,\n        rich_tracebacks=True,\n        tracebacks_show_locals=True,\n    )\n    console_format = logging.Formatter(\n        fmt=\"%(name)s - %(message)s\",\n        datefmt=\"%m/%d %H:%M:%S\",\n    )\n    console_handler.setFormatter(console_format)\n\n    f_format = logging.Formatter(\n        fmt=\"%(asctime)s - %(name)s: %(lineno)4d - %(levelname)s - %(message)s\",\n        datefmt=\"%y/%m/%d %H:%M:%S\",\n    )\n\n    function_caller_module = inspect.getmodule(inspect.stack()[1][0])\n    if function_caller_module is None:\n        name_or_path = \"unknown\"\n    elif function_caller_module.__name__ == \"__main__\":\n        if function_caller_module.__file__ is None:\n            name_or_path = function_caller_module.__name__\n        else:\n            name_or_path = function_caller_module.__file__.replace(\n                str(PROJECT_DIR) + \"/\", \"\"\n            ).replace(\"/\", \".\")\n            # Remove .py extension\n            name_or_path = Path(name_or_path).with_suffix(\"\")\n\n    else:\n        name_or_path = function_caller_module.__name__\n\n    log_path_map = {\n        \"name\": name_or_path,\n        \"version\": __version__,\n        \"date\": datetime.now(timezone.utc),\n    }\n\n    root_logger = logging.getLogger()\n    root_logger.addHandler(console_handler)\n\n    log_paths = []\n    for output_file, file_level in zip(output_files, file_levels, strict=True):\n        log_path_map[\"levelname\"] = logging.getLevelName(file_level)\n        log_path = LOG_DIR / output_file.format_map(log_path_map)\n        log_path.parent.mkdir(parents=True, exist_ok=True)\n\n        f_handler = logging.FileHandler(log_path)\n        f_handler.setLevel(file_level)\n        f_handler.setFormatter(f_format)\n\n        # Add handlers to the logger\n        root_logger.addHandler(f_handler)\n\n    logger.info(f\"mlproject {__version__}\")\n\n    for log_path in log_paths:\n        logger.info(f\"Logging to {log_path}\")\n</code></pre>"},{"location":"python/logging/#tip","title":"Tip","text":"<ul> <li>VSCode snippet \ud50c\ub7ec\uadf8\uc778\uc744 \uc774\uc6a9\ud558\uba74 \ube60\ub974\uac8c \ud0c0\uc774\ud551\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc124\uc815 \uc608\uc2dc:<ul> <li>ld \u2192 <code>logger.debug</code></li> <li>li \u2192 <code>logger.info</code></li> <li>lw \u2192 <code>logger.warning</code></li> <li>le \u2192 <code>logger.error</code></li> <li>lee \u2192 <code>logger.exception</code></li> <li>lc \u2192 <code>logger.critical</code></li> <li>logger \u2192     <pre><code>import logging\nlogger = logging.getLogger(__name__)\n</code></pre></li> </ul> </li> </ul>"},{"location":"python/versioneer/","title":"Versioneer\ub85c \ub3d9\uc801 \ubc84\uc804 \uad00\ub9ac","text":"<p>Why?</p> <ul> <li>\uc5f0\uad6c \ucf54\ub4dc\ub294 \uc218\uc2dc\ub85c \ubc14\ub00c\ubbc0\ub85c Experiment tracking \ud560 \ub54c \ubc84\uc804 \uc815\ubcf4 \ub85c\uae45\uc774 \ud544\uc218.</li> <li>\uc218\ub3d9\uc73c\ub85c \ubc84\uc804 \uc815\ubcf4\ub97c \uc801\uae30\uc5d0\ub294 \ub108\ubb34 \uc790\uc8fc \ubc14\ub01c.</li> <li>Git hash\ub97c \ubc84\uc804 \uc815\ubcf4\ub85c \uc0ac\uc6a9\ud558\uae30\uc5d0\ub294 \uc77d\uae30\uac00 \uc5b4\ub835\uace0 \uacfc\uac70/\ubbf8\ub798\ubc84\uc804 \ube44\uad50\uac00 \uc548\ub428.</li> </ul> <p>Solution</p> <ul> <li>Versioneer: \ubc84\uc804 \uc815\ubcf4\ub97c git tag\uc5d0\uc11c \uc77d\uc5b4\uc640 python project versioning</li> </ul> <pre><code>import mlproject\n\nprint(mlproject.__version__)\n</code></pre> out<pre><code>0.1.3+40.g1f4adfe.dirty\n</code></pre> <ul> <li>\ub9c8\uc9c0\ub9c9 Version tag (0.1.3): git tag \uc911 v\ub85c \uc2dc\uc791\ud558\ub294 \uac83\uc744 \ucc3e\uc74c</li> <li>+40: \uadf8 \ubc84\uc804 \uc774\ud6c4 40\uac1c\uc758 \ucee4\ubc0b\uc774 \uc874\uc7ac</li> <li>g1f4adfe: git hash\uac00 <code>1f4adfe</code>\uc784</li> <li>.dirty: \ucee4\ubc0b\ub418\uc9c0 \uc54a\uc740 \ubcc0\uacbd\uc0ac\ud56d\uc774 \uc788\uc74c.</li> </ul>"},{"location":"python/versioneer/#_1","title":"\uc124\uce58","text":"<ol> <li><code>src/mlproject/__init__.py</code>, <code>src/mlproject/_version.py</code> \uac00\uc838\ub2e4 \uc4f0\uae30</li> <li><code>pyproject.toml</code>\uc5d0 versioneer \uad00\ub828 \uc139\uc158 \uac00\uc838\ub2e4 \uc4f0\uae30</li> </ol>"},{"location":"python/versioneer/#_2","title":"\ube44\uc2b7\ud55c \ud234","text":"<ul> <li><code>setuptools-scm</code>: \ube44\uc2b7\ud558\uae34 \ud558\ub098 \ud55c\ubc88 pip\ub85c \uc124\uce58\ud560\ub54c \ubc84\uc804\uc774 \ud3c9\uc0dd \ubc84\uc804\uc774\uace0, \ub2e4\uc2dc \uc124\uce58\ub97c \ud574\uc57c \ubc84\uc804 \uc5c5\ub370\uc774\ud2b8\ub428. versioneer\ub294 \ub3d9\uc801\uc73c\ub85c \ubc14\ub01c. \uc5f0\uad6c\ucf54\ub4dc\ub294 versioneer\uac00 \ud3b8\ud560\ub4ef.</li> </ul>"},{"location":"python_tools/formatters/","title":"Formatter","text":"<ul> <li>formatter: \ucf54\ub4dc \uc790\uccb4\ub294 \ubc14\uafb8\uc9c0 \uc54a\uace0, \ucf54\ub4dc \ubaa8\uc591\uc744 \ubc14\uafb8\uc5b4\uc8fc\ub294 \ud234.  <ul> <li>Why?: \ud611\uc5c5 \ud658\uacbd\uc5d0\uc11c \ub8f0\uc744 \uc815\ud558\uc9c0 \uc54a\uc73c\uba74 conflict\uac00 \ub9ce\uc774 \uc0dd\uaca8 resolve\ud558\uae30 \ud798\ub4e4\uba70 \uc2e4\uc9c8\uc801\uc740 \ubcc0\uacbd\uc0ac\ud56d \ub9ac\ubdf0\ud558\uae30 \ud798\ub4e6.</li> </ul> </li> <li>\ud3ec\ub9e4\ud130 \uc801\uc6a9\uc73c\ub85c \uc778\ud574 \ucf54\ub4dc \ub85c\uc9c1\uc774 \ubc14\ub014 \ud655\ub960\uc740 \uad49\uc7a5\ud788 \uc801\uc73c\ubbc0\ub85c \uadf8\ub0e5 IDE\uc5d0\uc11c format on save \uc801\uc6a9\uc2dc\ud0a4\uba74 \ub428.</li> </ul>"},{"location":"python_tools/formatters/#python-formatters","title":"Python formatters","text":""},{"location":"python_tools/formatters/#black-formatter","title":"Black: \ud30c\uc774\uc36c \ub300\ud45c formatter","text":"<ul> <li>line length: 88<ul> <li>Why?: \ucf54\ub4dc\uac00 \ub108\ubb34 \uae38\uba74 \ud55c \ud654\uba74\uc5d0 \ucf54\ub4dc \ub450\uac1c\ub97c \ub744\uc6cc \ube44\uad50\ud558\ub4e0\uc9c0, \ub514\ubc84\uae45\uc744 \ud558\ub290\ub77c UI\uac00 \ub9ce\uc774 \ub5a0 \uc788\uc744 \ub54c \uc77d\uae30 \ud798\ub4e6.</li> </ul> </li> <li>string\uc740 double quotation (\")</li> <li>\ud568\uc218 parameters\ub294 \ud55c \uc904\uc5d0 \ud558\ub098\uc529</li> <li> <p>Examples:</p> <p>Before Black:</p> <pre><code>def calculate(a_large_number, another_large_number, yet_another_large_number, final_large_number):\n    sum_of_first_two=a_large_number+another_large_number\n    sum_of_last_two= yet_another_large_number+ final_large_number\n    overall_sum =sum_of_first_two +sum_of_last_two\n    return overall_sum\n</code></pre> <p>After Black:</p> <pre><code>def calculate(\n    a_large_number,\n    another_large_number,\n    yet_another_large_number,\n    final_large_number,\n):\n    sum_of_first_two = a_large_number + another_large_number\n    sum_of_last_two = yet_another_large_number + final_large_number\n    overall_sum = sum_of_first_two + sum_of_last_two\n    return overall_sum\n</code></pre> </li> </ul>"},{"location":"python_tools/formatters/#isort-import","title":"isort: import \uad6c\ubb38 \uc815\ub82c","text":"<ul> <li>\ud30c\uc774\uc36c \ub0b4\uc7a5, third party (pip install \ub41c \ubaa8\ub4c8), first party (\uc6b0\ub9ac \ud504\ub85c\uc81d\ud2b8) \uc21c\uc11c</li> <li>\uc54c\ud30c\ubcb3 \uc21c\uc11c</li> <li>\uac19\uc740 \ubaa8\ub4c8\uc5d0\uc11c import \ud558\ub294 elements \uc804\ubd80 \ud569\uccd0\uc90c</li> <li> <p>Examples:</p> <p>Before isort:</p> <pre><code>from my_lib import Object\nimport os\nfrom my_other_lib import run\nimport sys\nimport mlproject\nfrom third_lib import Widget\n</code></pre> <p>After isort:</p> <pre><code>import os\nimport sys\n\nfrom my_lib import Object\nfrom my_other_lib import run\nfrom third_lib import Widget\n\nimport mlproject\n</code></pre> </li> </ul>"},{"location":"python_tools/formatters/#ruff-rust-black-isort-flake8-linter","title":"ruff: Rust\ub85c \uad6c\ud604\ud55c \ub9e4\uc6b0 \ube60\ub978 black, isort (+ flake8 linter\uae4c\uc9c0)","text":"<ul> <li>Black, isort\uc640 99% \ud638\ud658\uc131</li> <li>isort\uac00 \uc798 \ub418\ub824\uba74 <code>pyproject.toml</code>\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd94\uac00\ud574\uc57c \ud568</li> </ul> <pre><code>[tool.ruff]\nsrc = [\"src\"]  # first party \ubaa8\ub4c8\uc744 \ucc3e\ub294 \uc704\uce58\n</code></pre> <ul> <li>\ucd94\uac00\ub85c \ubaa8\ub4e0 \ud30c\uc77c\uc5d0 required import \ucd94\uac00\ud558\ub294 \uae30\ub2a5\uc774 \uc788\uc74c</li> </ul> <pre><code># pyproject.toml\n[tool.ruff.lint.isort]\n# Python &lt; 3.10\uc5d0\uc11c typing \ud638\ud658\uc131 \uc720\uc9c0\nrequired-imports = [\n  \"from __future__ import annotations\",\n]\n</code></pre>"},{"location":"python_tools/formatters/#vscode-settings","title":"VSCode settings","text":"<ol> <li> <p>CLI commands \uc124\uce58: <pre><code>conda deactivate\npip3 install --user ruff\n</code></pre></p> </li> <li> <p>vscode extension\uc5d0\uc11c Ruff \uc124\uce58</p> </li> <li>VSCode settings.json \uc218\uc815</li> </ol> <pre><code>// settings.json\n// { .. } \uc548\uc5d0 \ub123\uae30\n\n\"[python]\": {\n    \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n    \"editor.formatOnSave\": true, // \uc800\uc7a5\ud560 \ub54c\ub9c8\ub2e4 formatting\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true // \uc800\uc7a5\ud560 \ub54c\ub9c8\ub2e4 import sorting\n    },\n},\n\"ruff.organizeImports\": true,\n</code></pre>"},{"location":"python_tools/formatters/#neovim-settings","title":"NeoVim settings","text":"<ol> <li>CLI commands \uc124\uce58: <pre><code>conda deactivate\npip3 install --user ruff\n</code></pre></li> <li> <p>lazy.nvim \ud50c\ub7ec\uadf8\uc778 \ub9e4\ub2c8\uc800 \uc124\uc815 (\uc124\uce58)</p> <ul> <li><code>init.lua</code> \ud30c\uc77c\uc5d0 \uc124\uce58 \uc2a4\ud06c\ub9bd\ud2b8 \ubcf5\uc0ac\ud558\uba74 \ub428</li> </ul> </li> <li> <p>lazy.nvim\uc5d0 conform.nvim \ud50c\ub7ec\uadf8\uc778 \ucd94\uac00 \ubc0f ruff \uc124\uc815.</p> <pre><code>  {\n    \"stevearc/conform.nvim\",\n    event = { \"BufWritePre\" },\n    cmd = { \"ConformInfo\" },\n    keys = {\n      {\n        -- Customize or remove this keymap to your liking\n        \"&lt;space&gt;pf\",\n        function()\n          require(\"conform\").format { async = true, lsp_fallback = true }\n        end,\n        mode = \"\",\n        desc = \"Format buffer\",\n      },\n    },\n    -- Everything in opts will be passed to setup()\n    opts = {\n      -- Define your formatters\n      formatters_by_ft = {\n        python = { \"ruff_fix\", \"ruff_format\" },\n      },\n      -- Set up format-on-save\n      format_on_save = { timeout_ms = 2000, lsp_fallback = true },\n      -- Customize formatters\n      formatters = {\n        ruff_fix = {\n          -- I: isort\n          -- D20, D21: docstring\n          -- UP00: upgrade to python 3.10\n          -- UP032: f-string over str.format\n          -- UP034: extraneous parentheses\n          -- ruff:[RUF100]: unused noqa\n\n          -- IGNORED:\n          -- ruff:[D212]: multi-line docstring summary should start at the first line (in favor of D213, second line)\n          prepend_args = {\n            \"check\",\n            \"--select\",\n            \"I,D20,D21,UP00,UP032,UP034\",\n            \"--ignore\",\n            \"D212\",\n          },\n        },\n      },\n    },\n    init = function()\n      -- If you want the formatexpr, here is the place to set it\n      vim.o.formatexpr = \"v:lua.require'conform'.formatexpr()\"\n    end,\n  },\n</code></pre> </li> </ol>"},{"location":"python_tools/formatters/#cli","title":"CLI\ub85c \ud3ec\ub9e4\ud305 \ud558\uae30","text":"<pre><code>ruff --select I --fix [\ud30c\uc77c.py]  # isort \uc801\uc6a9\nruff format [\ud30c\uc77c.py]  # black \uc801\uc6a9\n</code></pre> <p>Info</p> <p>isort\ub294 \uc5c4\ubc00\ud788 \ub9d0\ud558\uba74 \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \uc21c\uc11c\ub97c \ubcc0\uacbd\ud558\uae30 \ub54c\ubb38\uc5d0 formatter\uac00 \uc544\ub2d8. \ub530\ub77c\uc11c ruff\uc5d0\uc11c\ub294 isort linting (I) \ucf54\ub4dc\uac00 \uc788\uace0 \uadf8\uc5d0 \ub300\ud55c fix\uac00 \uc874\uc7ac\ud568.</p>"},{"location":"python_tools/linter/","title":"Linter","text":"<ul> <li>Linter: \ucf54\ub4dc \uc2a4\ud0c0\uc77c \ub4f1 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc815\ud55c \ub8f0\uc744 \uc9c0\ucf30\ub294\uc9c0 \uccb4\ud06c\ud558\uba70 \uac04\ub2e8\ud55c potential bug\ub3c4 \uc7a1\uc544\uc90d\ub2c8\ub2e4.</li> <li>Formatter\uc640 \ucc28\uc774\uc810: \ucf54\ub4dc \uc790\uccb4 \ub85c\uc9c1\uc774\ub098 \ud568\uc218 \ub4f1 \uc218\uc815\uc744 \uad8c\uc720\ud569\ub2c8\ub2e4. \ub9f9\uc2e0\ud558\uc9c0 \ub9d0\uace0 \uac00\uc774\ub4dc\ub77c \uc0dd\uac01\ud558\uace0 \uc4f0\uc138\uc694.</li> <li>LSP\uc640 \ucc28\uc774\uc810:<ol> <li>\uc18d\ub3c4: LSP\ub294 \ud504\ub85c\uc81d\ud2b8 \uc804\uccb4\ub97c \ubd84\uc11d\ud574 \ud568\uc218 definition \uc704\uce58 \ub4f1\ub3c4 \ud30c\uc545\ud558\uc9c0\ub9cc linter\ub294 \ud55c \ud30c\uc77c\ub9cc \uccb4\ud06c\ud569\ub2c8\ub2e4.</li> <li>Linter\ub294 \uc5d0\ub7ec\uac00 \uc8fc\ub85c \uc2a4\ud0c0\uc77c \uad00\ub828\uc774\uc9c0\ub9cc LSP\uc640 \uacb9\uce58\ub294 \uc5d0\ub7ec\ub3c4 \uc788\uae34 \ud569\ub2c8\ub2e4 (\uc608: \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc740 variable, import \uad6c\ubb38).</li> </ol> </li> </ul>"},{"location":"python_tools/linter/#python-linter","title":"Python linter","text":"<ul> <li>flake8: PEP8 \uc2a4\ud0c0\uc77c \uac00\uc774\ub4dc\ub97c \uc9c0\ucf1c\uc8fc\ub294 \ud30c\uc774\uc36c \ub300\ud45c linter. flake8-bugbear \uac19\uc740 \ud655\uc7a5 \ud50c\ub7ec\uadf8\uc778\ub3c4 \ub9ce\uc2b5\ub2c8\ub2e4.</li> <li>ruff: flake8 \ubc0f \uc778\uae30 \ud50c\ub7ec\uadf8\uc778\uc744 \uc804\ubd80 rust\ub85c \uad6c\ud604\ud55c python linter \ubc0f formatter. \uc800\ud76c \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 ruff\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.<ul> <li>\uc124\uce58\uac00 \uc26c\uc6c0: \ud50c\ub7ec\uadf8\uc778 \uc124\uce58\uac00 \ub9ce\uc740 flake8\uacfc \ub2ec\ub9ac <code>pip install ruff</code>\ub85c \ubaa8\ub4e0 linter, formatter \uae30\ub2a5 \uc0ac\uc6a9 \uac00\ub2a5</li> <li>\ube60\ub978 \uc18d\ub3c4: rust\ub85c \uad6c\ud604\ud574 \uc18d\ub3c4\uac00 10~100\ubc30 \ube60\ub985\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"python_tools/linter/#linting","title":"Linting \ube44\ud65c\uc131\ud654","text":"<p>Linting \uacb0\uacfc\ub97c \ubb34\uc2dc\ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0:</p> <ol> <li>Line \ube44\ud65c\uc131\ud654: \ub77c\uc778 \ub05d\uc5d0 <code># noqa: D401</code> \uacfc \uac19\uc740 \uc8fc\uc11d\uc744 \ub0a8\uaca8\uc8fc\uba74 \ud574\ub2f9 \ucf54\ub4dc(D401)\uac00 \ube44\ud65c\uc131\ud654\ub429\ub2c8\ub2e4.<ul> <li><code># noqa</code> \uae4c\uc9c0\ub9cc \uc801\uc73c\uba74 \ubaa8\ub4e0 \uc5d0\ub7ec \ucf54\ub4dc\ub97c \ube44\ud65c\uc131\ud654\ud569\ub2c8\ub2e4.</li> </ul> </li> <li>File \ube44\ud65c\uc131\ud654: \uc218\uc815\ud558\ub294 \ud30c\uc77c \ub9e8 \uc704\uc5d0 <code># flake8: noqa: D401 D402</code>\uc640 \uac19\uc740 \uc8fc\uc11d\uc744 \ub0a8\uae30\uba74 \ud30c\uc77c \uc804\uccb4\uc5d0\uc11c \ube44\ud65c\uc131\ud654\ud569\ub2c8\ub2e4.</li> <li>Project \ub2e8\uc704 \ube44\ud65c\uc131\ud654: <code>pyproject.toml</code>\uc5d0\uc11c <code>[tools.ruff.lint]</code> \ud56d\ubaa9\uc5d0 <code>ignore</code>\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4.</li> </ol> <p><code>pyproject.toml</code> \uc608\uc2dc:</p> <pre><code>[tool.ruff]\nsrc = [\"src\"]  # for ruff isort\nextend-exclude = [\n  \"src/mlproject/_version.py\",  # CHANGE\n]\n\n[tool.ruff.lint]\n# OPTIONALLY ADD MORE LATER\nselect = [\n  # flake8\n  \"E\",\n  \"F\",\n  \"W\",\n  \"B\",    # Bugbear\n  \"D\",    # Docstring\n  \"D213\", # Multi-line docstring summary should start at the second line (replace D212)\n  \"N\",    # Naming\n  \"C4\",   # flake8-comprehensions\n  \"UP\",   # pyupgrade\n  \"SIM\",  # simplify\n  \"RUF\",  # ruff-specific\n  \"RET\",  # return\n  \"PTH\",  # path\n  \"NPY\",  # numpy\n  \"PYI\",  # type stubs for pyright/pylance\n  \"PT\",   # pytest\n\n  # Not important\n  \"T10\",  # debug statements\n  \"T20\",  # print statements\n]\n\nignore = [\n  \"E402\",    # Module level import not at top of file\n  \"D10\",     # Missing docstring in public module\n  \"D200\",    # One-line docstring should fit on one line with quotes\n  \"D212\",    # Multi-line docstring summary should start at the first line\n  \"D417\",    # require documentation for every function parameter.\n  \"D401\",    # require an imperative mood for all docstrings.\n  \"PTH123\",  # Path.open should be used instead of built-in open\n]\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n\n[tool.ruff.lint.pycodestyle]\n# Black or ruff will enforce line length to be 88, except for docstrings and comments.\n# We set it to 120 so we have more space for docstrings and comments.\nmax-line-length = 120\n\n[tool.ruff.lint.isort]\nknown-third-party = [\"wandb\"]\n</code></pre>"},{"location":"python_tools/linter/#vscode-settings","title":"VSCode settings","text":"<ol> <li> <p>CLI commands \uc124\uce58: <pre><code>conda deactivate\npip3 install --user ruff\n</code></pre></p> </li> <li> <p>vscode extension\uc5d0\uc11c Ruff \uc124\uce58</p> </li> <li>Diagnostics, ruff fix \ub4f1\uc744 \uc0ac\uc6a9 \uac00\ub2a5. Formatting \uc124\uc815\uc740 Formatters \ucc38\uace0.</li> </ol>"},{"location":"python_tools/linter/#cli","title":"CLI \uc0ac\uc6a9\ubc95","text":"<pre><code>ruff [file]  # lint error \uccb4\ud06c\nruff --fix [file]  # fix \uc801\uc6a9\nruff --select E --diff [file]  # E \ucf54\ub4dc \uad00\ub828 \uc5d0\ub7ec\ub97c fix\ud560\ub54c \uc5b4\ub5bb\uac8c \ub420\uc9c0 diff \ucd9c\ub825\n</code></pre>"},{"location":"python_tools/lsp/","title":"LSP (Language Server Protocol)","text":"<ul> <li>LSP: \ud504\ub85c\uc81d\ud2b8 \uc804\uccb4\ub97c \uccb4\ud06c\ud574 IDE\uc5d0\uc11c go to definition, signature (\ud568\uc218 \ubbf8\ub9ac\ubcf4\uae30) \uae30\ub2a5 \ub4f1\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.<ul> <li>\uadf8 \uc774\uc678\uc758 linter\uc640 \ube44\uc2b7\ud55c \uae30\ub2a5\ub3c4 \uc77c\ubd80 \uad6c\ud604\ub418\uae30\ub3c4 \ud569\ub2c8\ub2e4. (\uc5b8\uc5b4\ub9c8\ub2e4 \ub2e4\ub984)</li> </ul> </li> <li>IDE\uc5d0 \ub0b4\uc7a5\ub41c \uacbd\uc6b0\uac00 \ub9ce\uc2b5\ub2c8\ub2e4. (NeoVim, VSCode \ub0b4\uc7a5 \uae30\ub2a5)</li> </ul>"},{"location":"python_tools/lsp/#python-lsp-pylance-pyright","title":"Python LSP (Pylance, Pyright)","text":"<p>VSCode\uc5d0\uc11c\ub294 pylance, \ub2e4\ub978 IDE\uc5d0\uc11c\ub294 \uc624\ud508\uc18c\uc2a4 \ubc84\uc804\uc778 pyright\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</p> <ul> <li>LSP \uae30\ub2a5 \uc774\uc678 Static type checking \uae30\ub2a5\uc774 \uc788\uc2b5\ub2c8\ub2e4. C++ \ucc98\ub7fc type\uc744 \uba85\ud655\ud788 \uc9c0\ucf1c\uc92c\ub294\uc9c0 \uccb4\ud06c\ud569\ub2c8\ub2e4.  <ul> <li>\ubaa8\ub4e0 \ubcc0\uc218, \ud568\uc218\uc758 type\uc744 \uc801\uc744 \ud544\uc694\ub294 \uc5c6\uace0, \uac04\ub2e8\ud55c \uacbd\uc6b0\ub294 \uc54c\uc544\uc11c \ucd94\uce21\ud569\ub2c8\ub2e4.</li> <li>Inlay hints \uae30\ub2a5\uc744 \ucf1c\uc11c LSP\uc5d0\uc11c \ucd94\uce21\ud558\ub294 \ud0c0\uc785\uc774 \ubb54\uc9c0 \ubcf4\uba74\uc11c, \uc798\ubabb\ub41c \ubd80\ubd84\uc740 \uba85\uc2dc\ud558\uba74\uc11c \ucf54\ub529\ud574\uc57c \uc88b\uc2b5\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"python_tools/lsp/#vscode-settings","title":"VSCode settings","text":"<p>VSCode\uc5d0 type checking \ubc0f inlay hint \uc801\uc6a9\ud558\uae30.</p> <ul> <li>Pylance \ud50c\ub7ec\uadf8\uc778 \uc124\uce58 \ud655\uc778. \uae30\ubcf8\uc73c\ub85c \uc124\uce58\ub41c \uacbd\uc6b0\uac00 \ub9ce\uc74c. </li> <li>\ub108\ubb34 \ubcf5\uc7a1\ud574\uc9c0\uba74 \uc548 \uc88b\uc73c\ub2c8 \uc77c\ub2e8 functionReturnTypes, variableTypes \ub9cc \uc0ac\uc6a9 (\uadf8 \uc678 \ud568\uc218 argument\uc758 type\ub3c4 \ubcfc \uc218 \uc788\uc74c)</li> <li>setting.json\uc5d0 \uc544\ub798 \ub0b4\uc6a9 \ucd94\uac00     <pre><code>// settings.json\n// { .. } \uc548\uc5d0 \ub123\uae30\n\"python.analysis.inlayHints.functionReturnTypes\": true,\n\"python.analysis.inlayHints.variableTypes\": true,\n\"python.analysis.typeCheckingMode\": \"basic\",\n</code></pre></li> </ul>"},{"location":"python_tools/lsp/#pylance","title":"Pylance \uc5d0\ub7ec \uc608\uc2dc","text":"<pre><code>def add_numbers(num1: int, num2: int) -&gt; int:\n    return num1 + num2\n\n# Call the function with correct arguments\nnum = add_numbers(2, 3)\n\n# Call the function with INCORRECT arguments\nadd1 = 'abc'\nresult = add_numbers(add1, num)     # \ud83d\udea8 TYPE ERROR!\n\n# pylance \uc5d0\ub7ec\ub97c \ubb34\uc2dc\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac15\uc81c\ub85c type\uc744 \uc9c0\uc815\ud574\uc8fc\uba74 \ub429\ub2c8\ub2e4.\nadd1: int = 'abc'                # \ud83d\udea8 \uc774 \ub77c\uc778\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ud55c\ubc88 \ub098\uae34 \ud568.\n# \ud558\uc9c0\ub9cc, \ub2e4\uc74c \uc904 \ubd80\ud130\ub294 add1\uc744 int\ub77c \uc0dd\uac01\ud558\uace0 pylance\uac00 \ucf54\ub4dc\ub97c \ud30c\uc2f1\ud568.\nresult = add_numbers(add1, num)  # \u2705 NO TYPE ERROR!\nprint(result)    # 'abc5'\n# result\ub294 int\ub77c\uace0 \uc0dd\uac01\ud568. \uc774\ub97c \uc5b5\uc9c0\ub85c \ud574\uacb0\ud558\ub824\uba74 \n</code></pre> <p>\uc704 \ucc98\ub7fc \uc5b5\uc9c0\ub85c type\uc744 \ub9de\ucdb0\uc11c \uc2e4\ud589\ud558\uba74, \uacb0\uad6d result\ub294 int\ub77c\uace0 \uc0dd\uac01\ud574 pylance\uac00 \ud504\ub85c\uc81d\ud2b8\ub97c parsing\ud569\ub2c8\ub2e4.  </p> <p>\ud574\uacb0\ubc95:</p> <ol> <li>\uc5b5\uc9c0\ub85c \ud574\uacb0:     <pre><code>add1 = 'abc'\nresult: str = add_numbers(add1, num)\n# \uadf8 \ub2e4\uc74c\ubd80\ud130 result\ub294 str\uc774\ub77c\uace0 \uc0dd\uac01\ub428.\n</code></pre></li> <li>\ud568\uc218 definition\uc744 \ubcc0\uacbd:     <pre><code>def add_numbers_or_string(var1: int | str, var2: int | str) -&gt; int | str:\n    if isinstance(var2, str):\n        var1 = str(var1)\n    return var1 + var2\n</code></pre></li> </ol>"},{"location":"python_tools/lsp/#type-stub","title":"Type stub","text":"<p>\uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 typing\uc774 \ubb38\uc81c\uac00 \uc788\uc744 \ub54c, \uc6b0\ub9ac\uac00 \uc9c1\uc811 type stub\uc744 \ub9cc\ub4e4\uc5b4 custom\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uc81d\ud2b8 \ub8e8\ud2b8\uc5d0\uc11c <code>typings/\ud328\ud0a4\uc9c0\uba85/\ubaa8\ub4c8.pyi</code>\ub97c \ub9cc\ub4e4\uc5b4 typing\uc744 \ud569\ub2c8\ub2e4. \ud568\uc218\uc758 body\ub294 <code>...</code> \uc774\ub77c\uace0 \uc801\uace0, signature (definition)\ub9cc \uc791\uc131\ud569\ub2c8\ub2e4.</p>"},{"location":"python_tools/lsp/#1","title":"\ubb38\uc81c \uc0c1\ud669 1","text":"<p>EasyDict\ub97c \uc0ac\uc6a9\ud558\ub2c8 key\ub97c implicit\ud558\uac8c \ub9cc\ub4e4\uba74 pyright \uc5d0\ub7ec\uac00 \ub0a8. </p>"},{"location":"python_tools/lsp/#_1","title":"\ud574\uacb0","text":"<ol> <li>\ub2e4\uc74c\uacfc \uac19\uc774 stub \ud30c\uc77c \ud0ec\ud50c\ub9bf\uc744 \uc791\uc131</li> </ol> <pre><code>pyright --createstub easydict\n</code></pre> <ol> <li><code>typings/easydict/__init__.pyi</code> \uc5d0\uc11c class definition \uc548\uc5d0 <code>__getattr__</code> \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4 type hint\ub97c Any\ub85c \uc791\uc131</li> </ol> <pre><code>from typing import Any\n\nclass EasyDict(dict):\n    # \ub2e4\ub978 \ud568\uc218\ub294 \uc0dd\ub7b5\ub428\n\n    # EasyDict({'a': 1}).a \ud560 \ub54c, __getattr__\uc774 \ud638\ucd9c\ub41c\ub2e4.\n    # \ud0c0\uc785\uc744 \ubaa8\ub974\uae30 \ub54c\ubb38\uc5d0, Any\ub85c \ucc98\ub9ac\ud55c\ub2e4.\n    def __getattr__(self, name: str) -&gt; Any: ...\n</code></pre>"},{"location":"python_tools/lsp/#2","title":"\ubb38\uc81c \uc0c1\ud669 2","text":"<p>BioPython \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 typing\uc774 \ub108\ubb34 \uc548\uc88b\uc544\uc11c \uc5d0\ub7ec\uac00 \ub108\ubb34 \ub9ce\uc774 \ub0a8. \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ubcf5\uc7a1\ud574\uc11c \uc9c1\uc811 \uc218\uc815\uc740 \ud798\ub4e0 \uc0c1\ud669.</p>"},{"location":"python_tools/lsp/#_2","title":"\ud574\uacb0","text":"<ol> <li><code>typings/Bio/__init__.pyi</code>\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131</li> </ol> <pre><code>from typing import Incomplete\n\ndef __getattr__(name: str) -&gt; Incomplete: ...\n</code></pre> <p>\ubaa8\ub4e0 Bio \ubaa8\ub4c8\uc758 \ubcc0\uc218\ub4e4\uc740 Incomplete (\ub3d9\uc801) \ud0c0\uc785\uc73c\ub85c \ub418\uc5b4 \ud0c0\uc785 \uccb4\ud06c\ub97c \uac74\ub108\ub700.</p> <p>Info</p> <p>Incomplete type\uc740 Any type\uacfc \uae30\ub2a5\uc740 \ub3d9\uc77c(alias) \ud558\uc9c0\ub9cc, Any\ub294 \ud0c0\uc785\uc744 \uc804\ud600 \ubaa8\ub974\ub294 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ud558\uace0 Incomplete\ub294 \ud0c0\uc774\ud551\uc744 \ud558\ub2e4\uac00 \ub9d0\uc558\uc744 \ub54c \uc0ac\uc6a9\ud568.</p> <ol> <li>\uc77c\ubd80 typing\ub9cc \ucf1c\uace0 \uc2f6\uc73c\uba74 \ucd94\uac00\ub3c4 \uac00\ub2a5</li> </ol> <pre><code>from typing import Incomplete\n\ndef __getattr__(name: str) -&gt; Incomplete: ...\ndef some_function() -&gt; str: ...\n</code></pre>"},{"location":"python_tools/other_vscode_extensions/","title":"VSCode extension \ucd94\ucc9c","text":"<ul> <li>autoDocstring<ul> <li>\uc790\ub3d9\uc73c\ub85c docstring \ud15c\ud50c\ub9bf \uc0dd\uc131</li> <li>Docstring Format\uc744 google-notypes\ub85c \uc124\uc815</li> </ul> </li> <li>Error Lens<ul> <li>\uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c verbose\ud558\uac8c \ubcf4\uc5ec\uc90c</li> </ul> </li> <li>shellcheck<ul> <li>shell script\ub97c linting \ud574\uc90c</li> </ul> </li> </ul>"},{"location":"python_tools/todo_highlights/","title":"TODO highlights","text":"<ul> <li>\uc8fc\uc11d\uc5d0 \uc788\ub294 <code># TODO:</code> \ub4f1\uc744 \ud558\uc774\ub77c\uc774\ud305\ud574\uc8fc\ub294 \ud50c\ub7ec\uadf8\uc778\uc785\ub2c8\ub2e4.</li> <li>\ub2e4\ub978 collaborator\uac00 \uaf2d \uc54c\uc544\uc57c \ud560 \uc911\uc694\ud55c \uc815\ubcf4\ub294 \uc27d\uac8c \uc54c\uc544 \ubcfc \uc218 \uc788\uac8c \ud0a4\uc6cc\ub4dc\ub97c \ud1b5\uc77c\uc2dc\ucf1c \ud558\uc774\ub77c\uc774\ud305\ud574\uc57c \ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"python_tools/todo_highlights/#vscode","title":"VSCode\uc5d0\uc11c \uc124\uce58","text":"<ul> <li>vscode extension\uc5d0\uc11c TODO Highlight v2 \uc124\uce58</li> <li>setting.json\uc5d0 \uc544\ub798 \ub0b4\uc6a9 \ucd94\uac00</li> </ul> <pre><code>\"todohighlight.isEnable\": true,\n\"todohighlight.keywords\": [\n    \"FIX:\",\n    \"BUG:\",\n    \"ISSUE:\",\n    \"DEBUG:\",\n    \"REVIEW:\",\n    \"NOTE:\",\n    \"INFO:\",\n    \"TODO:\",\n    \"CHECK:\",\n    \"PERF:\",\n    \"WARN:\",\n    \"WARNING:\",\n    \"TEST:\",\n],\n</code></pre>"},{"location":"python_tools/todo_highlights/#neovim-settings","title":"NeoVim settings","text":"<ol> <li> <p>lazy.nvim \ud50c\ub7ec\uadf8\uc778 \ub9e4\ub2c8\uc800 \uc124\uc815 (\uc124\uce58)</p> <ul> <li><code>init.lua</code> \ud30c\uc77c\uc5d0 \uc124\uce58 \uc2a4\ud06c\ub9bd\ud2b8 \ubcf5\uc0ac\ud558\uba74 \ub428</li> </ul> </li> <li> <p>lazy.nvim\uc5d0 todo-comments.nvim \ud50c\ub7ec\uadf8\uc778 \ucd94\uac00 \ubc0f ruff \uc124\uc815.</p> <pre><code>  {\n    \"folke/todo-comments.nvim\",\n    cmd = { \"TodoTrouble\", \"TodoTelescope\" },\n    event = { \"BufReadPost\", \"BufNewFile\" },\n    dependencies = \"nvim-lua/plenary.nvim\",\n  },\n</code></pre> </li> </ol>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> mlproject<ul> <li> health<ul> <li> font</li> <li> slack</li> </ul> </li> <li> two_numbers</li> <li> utils<ul> <li> config</li> <li> log</li> <li> rich</li> <li> slack<ul> <li> interactive</li> <li> send_only</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/mlproject/","title":"Index","text":""},{"location":"reference/mlproject/two_numbers/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> two_numbers","text":""},{"location":"reference/mlproject/two_numbers/#mlproject.two_numbers.TwoNumbers","title":"<code>TwoNumbers</code>  <code>dataclass</code>","text":"<p>\uc815\uc218 \ub450 \uac1c \ub354\ud558\ub294 \ud074\ub798\uc2a4.</p> Source code in <code>src/mlproject/two_numbers.py</code> <pre><code>@dataclass\nclass TwoNumbers:\n    \"\"\"\uc815\uc218 \ub450 \uac1c \ub354\ud558\ub294 \ud074\ub798\uc2a4.\"\"\"\n\n    num_1: int\n    num_2: int\n\n    def add(self):\n        \"\"\"\n        Add two numbers together.\n\n        Examples:\n            &gt;&gt;&gt; TwoNumbers(1, 2).add()\n            3\n\n            &gt;&gt;&gt; TwoNumbers(1, -1).add()\n            0\n\n        Returns:\n            (int): The sum of the two numbers.\n\n        Note:\n            This function only supports integers.\n\n        Todo: You can put title here.\n            * Add support for floats.\n            * Add support for strings.\n        \"\"\"\n        assert isinstance(self.num_1, int)\n        assert isinstance(self.num_2, int)\n        return self.num_1 + self.num_2\n</code></pre>"},{"location":"reference/mlproject/two_numbers/#mlproject.two_numbers.TwoNumbers.add","title":"<code>add()</code>","text":"<p>Add two numbers together.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TwoNumbers(1, 2).add()\n3\n</code></pre> <pre><code>&gt;&gt;&gt; TwoNumbers(1, -1).add()\n0\n</code></pre> <p>Returns:</p> Type Description <code>int</code> <p>The sum of the two numbers.</p> Note <p>This function only supports integers.</p> You can put title here. <ul> <li>Add support for floats.</li> <li>Add support for strings.</li> </ul> Source code in <code>src/mlproject/two_numbers.py</code> <pre><code>def add(self):\n    \"\"\"\n    Add two numbers together.\n\n    Examples:\n        &gt;&gt;&gt; TwoNumbers(1, 2).add()\n        3\n\n        &gt;&gt;&gt; TwoNumbers(1, -1).add()\n        0\n\n    Returns:\n        (int): The sum of the two numbers.\n\n    Note:\n        This function only supports integers.\n\n    Todo: You can put title here.\n        * Add support for floats.\n        * Add support for strings.\n    \"\"\"\n    assert isinstance(self.num_1, int)\n    assert isinstance(self.num_2, int)\n    return self.num_1 + self.num_2\n</code></pre>"},{"location":"reference/mlproject/health/","title":"Index","text":"<p>Check health of the installation.</p>"},{"location":"reference/mlproject/health/#mlproject.health.check_binaries","title":"<code>check_binaries()</code>","text":"<p>Check if binaries are installed.</p> Source code in <code>src/mlproject/health/__init__.py</code> <pre><code>def check_binaries():\n    \"\"\"Check if binaries are installed.\"\"\"\n    return True\n</code></pre>"},{"location":"reference/mlproject/health/#mlproject.health.check_env","title":"<code>check_env()</code>","text":"<p>Check environment variables.</p> Source code in <code>src/mlproject/health/__init__.py</code> <pre><code>def check_env():\n    \"\"\"Check environment variables.\"\"\"\n    ppmi_data_dir = os.environ.get(\"MLPROJECT_DATA_DIR\")\n\n    if ppmi_data_dir is None:\n        logger.warning(\n            \"\ud83e\udd12 Please set the environment variable MLPROJECT_DATA_DIR to the path of the data directory.\\n\"\n            f\"Otherwise, the default {DATA_DIR} will be used.\"\n        )\n        return False\n\n    logger.info(f\"\u2705 MLPROJECT_DATA_DIR is set to {ppmi_data_dir}\")\n    return True\n</code></pre>"},{"location":"reference/mlproject/health/font/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> font","text":""},{"location":"reference/mlproject/health/font/#mlproject.health.font.verify_fonts_installed","title":"<code>verify_fonts_installed()</code>","text":"<p>This function verifies that the FiraCode font is installed because Rich Console.export_svg() uses it.</p> <p>Actually, the svg itself doesn't need the font but when we convert it to PDF using cairosvg, the font is needed.</p> Source code in <code>src/mlproject/health/font.py</code> <pre><code>def verify_fonts_installed():\n    \"\"\"\n    This function verifies that the FiraCode font is installed because Rich Console.export_svg() uses it.\n\n    Actually, the svg itself doesn't need the font but when we convert it to PDF using cairosvg, the font is needed.\n    \"\"\"\n    cmd = [\"fc-match\", \"FiraCode:style=Regular\"]\n    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]\n\n    if not output.decode(\"utf-8\").startswith(\"FiraCode-Regular\"):\n        raise FontNotInstalledError(\"FiraCode\")\n\n    cmd = [\"fc-match\", \"FiraCode:style=Bold\"]\n    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]\n\n    if not output.decode(\"utf-8\").startswith(\"FiraCode-Bold\"):\n        raise FontNotInstalledError(\"FiraCode\")\n</code></pre>"},{"location":"reference/mlproject/health/slack/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> slack","text":""},{"location":"reference/mlproject/utils/","title":"Index","text":""},{"location":"reference/mlproject/utils/#mlproject.utils.setup_logging","title":"<code>setup_logging(console_level=default_log_level, output_files=None, file_levels=None)</code>","text":"<p>Setup logging with RichHandler and FileHandler.</p> <p>You should call this function at the beginning of your script.</p> <p>Parameters:</p> Name Type Description Default <code>console_level</code> <code>int | str</code> <p>Logging level for console. Defaults to INFO or env var MLPROJECT_LOG_LEVEL.</p> <code>default_log_level</code> <code>output_files</code> <code>list[str] | None</code> <p>List of output file paths, relative to LOG_DIR. If None, use default.</p> <code>None</code> <code>file_levels</code> <code>list[int] | None</code> <p>List of logging levels for each output file. If None, use default.</p> <code>None</code> Source code in <code>src/mlproject/utils/log.py</code> <pre><code>def setup_logging(\n    console_level: int | str = default_log_level,\n    output_files: list[str] | None = None,\n    file_levels: list[int] | None = None,\n):\n    \"\"\"\n    Setup logging with RichHandler and FileHandler.\n\n    You should call this function at the beginning of your script.\n\n    Args:\n        console_level: Logging level for console. Defaults to INFO or env var MLPROJECT_LOG_LEVEL.\n        output_files: List of output file paths, relative to LOG_DIR. If None, use default.\n        file_levels: List of logging levels for each output file. If None, use default.\n    \"\"\"\n    if output_files is None:\n        output_files = [\"{date:%Y%m%d-%H%M%S}-{name}-{levelname}-{version}.log\"]\n    if file_levels is None:\n        file_levels = [logging.INFO]\n\n    assert len(output_files) == len(\n        file_levels\n    ), \"output_files and file_levels must have the same length\"\n\n    # NOTE: Initialise with NOTSET level and null device, and add stream handler separately.\n    # This way, the root logging level is NOTSET (log all), and we can customise each handler's behaviour.\n    # If we set the level during the initialisation, it will affect to ALL streams,\n    # so the file stream cannot be more verbose (lower level) than the console stream.\n    logging.basicConfig(\n        format=\"\",\n        level=logging.NOTSET,\n        stream=open(os.devnull, \"w\"),  # noqa: SIM115\n    )\n\n    # If you want to suppress logs from other modules, set their level to WARNING or higher\n    # logging.getLogger('slowfast.utils.checkpoint').setLevel(logging.WARNING)\n\n    console_handler = RichHandler(\n        level=console_level,\n        show_time=True,\n        show_level=True,\n        show_path=True,\n        rich_tracebacks=True,\n        tracebacks_show_locals=True,\n    )\n    console_format = logging.Formatter(\n        fmt=\"%(name)s - %(message)s\",\n        datefmt=\"%m/%d %H:%M:%S\",\n    )\n    console_handler.setFormatter(console_format)\n\n    f_format = logging.Formatter(\n        fmt=\"%(asctime)s - %(name)s: %(lineno)4d - %(levelname)s - %(message)s\",\n        datefmt=\"%y/%m/%d %H:%M:%S\",\n    )\n\n    function_caller_module = inspect.getmodule(inspect.stack()[1][0])\n    if function_caller_module is None:\n        name_or_path = \"unknown\"\n    elif function_caller_module.__name__ == \"__main__\":\n        if function_caller_module.__file__ is None:\n            name_or_path = function_caller_module.__name__\n        else:\n            name_or_path = function_caller_module.__file__.replace(\n                str(PROJECT_DIR) + \"/\", \"\"\n            ).replace(\"/\", \".\")\n            # Remove .py extension\n            name_or_path = Path(name_or_path).with_suffix(\"\")\n\n    else:\n        name_or_path = function_caller_module.__name__\n\n    log_path_map = {\n        \"name\": name_or_path,\n        \"version\": __version__,\n        \"date\": datetime.now(timezone.utc),\n    }\n\n    root_logger = logging.getLogger()\n    root_logger.addHandler(console_handler)\n\n    log_paths = []\n    for output_file, file_level in zip(output_files, file_levels, strict=True):\n        log_path_map[\"levelname\"] = logging.getLevelName(file_level)\n        log_path = LOG_DIR / output_file.format_map(log_path_map)\n        log_path.parent.mkdir(parents=True, exist_ok=True)\n\n        f_handler = logging.FileHandler(log_path)\n        f_handler.setLevel(file_level)\n        f_handler.setFormatter(f_format)\n\n        # Add handlers to the logger\n        root_logger.addHandler(f_handler)\n\n    logger.info(f\"mlproject {__version__}\")\n\n    for log_path in log_paths:\n        logger.info(f\"Logging to {log_path}\")\n</code></pre>"},{"location":"reference/mlproject/utils/config/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> config","text":""},{"location":"reference/mlproject/utils/config/#mlproject.utils.config.BaseConfig","title":"<code>BaseConfig</code>  <code>dataclass</code>","text":"Source code in <code>src/mlproject/utils/config.py</code> <pre><code>@dataclass\nclass BaseConfig:\n    @property\n    def envvar_prefix(self) -&gt; str:\n        return \"MLCONFIG_\"\n\n    def __post_init__(self):\n        self.verify_unknown_env_vars()\n        self.update_based_on_env_vars()\n        self.confirm_validity()\n\n    def update_based_on_env_vars(self):\n        import os\n        from dataclasses import fields\n        from types import NoneType, UnionType\n        from typing import get_args, get_origin\n\n        from rich.console import Console\n\n        # NOTE: without soft wrapping, it will line break depending on the width of the terminal.\n        # Which may cause the failure of the doctest.\n        console = Console(soft_wrap=True)\n\n        # for key, value in asdict(self).items():\n        for class_field in fields(self):\n            key = class_field.name\n            vartype = class_field.type\n\n            env_var = os.getenv(f\"{self.envvar_prefix}{key}\")\n            if env_var:\n                if get_origin(vartype) is UnionType:\n                    # If the type is Union, we use the first type\n                    # unless the value is None.\n                    if NoneType in get_args(vartype) and env_var == \"None\":\n                        setattr(self, key, None)\n\n                        console.print(\n                            f\"{type(self).__name__}: Updating {key} from env var \"\n                            f\"{self.envvar_prefix}{key}=None as NoneType\"\n                        )\n                    else:\n                        self._set_value_as_type(key, env_var, get_args(vartype)[0])\n                else:\n                    self._set_value_as_type(key, env_var, vartype)\n\n        # Handle the local rank.\n        env_local_rank = int(os.environ.get(\"LOCAL_RANK\", -1))\n        if env_local_rank != -1 and env_local_rank != self.local_rank:\n            self.local_rank = env_local_rank\n\n    def _set_value_as_type(self, key, value: str, vartype):\n        \"\"\"Set the string value as the given type.\"\"\"\n        import ast\n        from typing import get_origin\n\n        from rich.console import Console\n\n        if get_origin(vartype) is list:\n            setattr(self, key, ast.literal_eval(value))\n            assert isinstance(\n                getattr(self, key), vartype\n            ), f\"{type(self).__name__}.{key} has to be {vartype} but got {type(getattr(self, key))}\"\n        elif vartype is bool:\n            if value == \"True\":\n                setattr(self, key, True)\n            elif value == \"False\":\n                setattr(self, key, False)\n            else:\n                raise ValueError(\n                    f\"{type(self).__name__}: Unknown boolean value for {key}={value} trying to update from env var\"\n                )\n        else:\n            setattr(self, key, vartype(value))\n\n        console = Console(soft_wrap=True)\n        console.print(\n            f\"{type(self).__name__}: Updating {key} from env var \"\n            f\"{self.envvar_prefix}{key}={value} as type {vartype}\"\n        )\n\n    def print_fields(self):\n        from dataclasses import fields\n\n        from rich.console import Console\n\n        console = Console(soft_wrap=True)\n\n        console.print(f\"{type(self).__name__}: Fields:\")\n        for fld in fields(self):\n            console.print(f\"{fld.name}: {fld.type} = {fld.default!r}\")\n\n    def verify_unknown_env_vars(self):\n        import os\n        from dataclasses import asdict\n\n        # os.environ.keys() is always uppercase\n        for name, value in os.environ.items():\n            keys_lower = [k.lower() for k in asdict(self)]\n            if (\n                name.startswith(self.envvar_prefix)\n                and name[len(self.envvar_prefix) :].lower() not in keys_lower\n            ):\n                print(f\"ERROR while updating from env var {name}\")\n                print(\"Possible values are:\")\n                print()\n                self.print_fields()\n                raise ValueError(f\"Unknown environment variable {name}={value}\")\n\n    def confirm_validity(self):\n        pass\n</code></pre>"},{"location":"reference/mlproject/utils/config/#mlproject.utils.config.ExampleConfig","title":"<code>ExampleConfig</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseConfig</code></p> <p>BaseConfig \uc0ac\uc6a9\ubc95 \uc608: BaseConfig\ub97c inherit\ud574\uc11c \ubcc0\uc218, \ud0c0\uc785, default\uac12\uc744 \uc801\uc73c\uba74 \ub429\ub2c8\ub2e4.</p> <p><code>envvar_prefix</code> \ud568\uc218\ub97c override\ud574\uc11c \ud658\uacbd\ubcc0\uc218 prefix\ub97c \uc815\uc758\ud558\uace0, \ud658\uacbd\ubcc0\uc218\ub97c \uc774\uc6a9\ud574 \ubaa8\ub4e0 \uac12\uc744 \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cfg = ExampleConfig()\n&gt;&gt;&gt; cfg\nExampleConfig(train_batch_size=1, alpha=None)\n</code></pre> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.environ['MLCONFIG_train_batch_size'] = '2'\n&gt;&gt;&gt; ExampleConfig()\nExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\nExampleConfig(train_batch_size=2, alpha=None)\n</code></pre> <pre><code>&gt;&gt;&gt; os.environ['MLCONFIG_alpha'] = '0.5'\n&gt;&gt;&gt; ExampleConfig()\nExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\nExampleConfig: Updating alpha from env var MLCONFIG_alpha=0.5 as type &lt;class 'float'&gt;\nExampleConfig(train_batch_size=2, alpha=0.5)\n</code></pre> <pre><code>&gt;&gt;&gt; # Setting alpha to None with the string \"None\"\n&gt;&gt;&gt; os.environ['MLCONFIG_alpha'] = 'None'\n&gt;&gt;&gt; ExampleConfig()\nExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\nExampleConfig: Updating alpha from env var MLCONFIG_alpha=None as NoneType\nExampleConfig(train_batch_size=2, alpha=None)\n</code></pre> <pre><code>&gt;&gt;&gt; # Undefined name in environment variable. Maybe a typo?\n&gt;&gt;&gt; os.environ['MLCONFIG_unknown'] = '1'\n&gt;&gt;&gt; ExampleConfig()\nTraceback (most recent call last):\n ...\nValueError: Unknown environment variable MLCONFIG_unknown=1\n</code></pre> Source code in <code>src/mlproject/utils/config.py</code> <pre><code>@dataclass\nclass ExampleConfig(BaseConfig):\n    \"\"\"\n    BaseConfig \uc0ac\uc6a9\ubc95 \uc608: BaseConfig\ub97c inherit\ud574\uc11c \ubcc0\uc218, \ud0c0\uc785, default\uac12\uc744 \uc801\uc73c\uba74 \ub429\ub2c8\ub2e4.\n\n    `envvar_prefix` \ud568\uc218\ub97c override\ud574\uc11c \ud658\uacbd\ubcc0\uc218 prefix\ub97c \uc815\uc758\ud558\uace0,\n    \ud658\uacbd\ubcc0\uc218\ub97c \uc774\uc6a9\ud574 \ubaa8\ub4e0 \uac12\uc744 \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n    Examples:\n        &gt;&gt;&gt; cfg = ExampleConfig()\n        &gt;&gt;&gt; cfg\n        ExampleConfig(train_batch_size=1, alpha=None)\n\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; os.environ['MLCONFIG_train_batch_size'] = '2'\n        &gt;&gt;&gt; ExampleConfig()\n        ExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\n        ExampleConfig(train_batch_size=2, alpha=None)\n\n        &gt;&gt;&gt; os.environ['MLCONFIG_alpha'] = '0.5'\n        &gt;&gt;&gt; ExampleConfig()\n        ExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\n        ExampleConfig: Updating alpha from env var MLCONFIG_alpha=0.5 as type &lt;class 'float'&gt;\n        ExampleConfig(train_batch_size=2, alpha=0.5)\n\n        &gt;&gt;&gt; # Setting alpha to None with the string \"None\"\n        &gt;&gt;&gt; os.environ['MLCONFIG_alpha'] = 'None'\n        &gt;&gt;&gt; ExampleConfig()\n        ExampleConfig: Updating train_batch_size from env var MLCONFIG_train_batch_size=2 as type &lt;class 'int'&gt;\n        ExampleConfig: Updating alpha from env var MLCONFIG_alpha=None as NoneType\n        ExampleConfig(train_batch_size=2, alpha=None)\n\n        &gt;&gt;&gt; # Undefined name in environment variable. Maybe a typo?\n        &gt;&gt;&gt; os.environ['MLCONFIG_unknown'] = '1'\n        &gt;&gt;&gt; ExampleConfig()\n        Traceback (most recent call last):\n         ...\n        ValueError: Unknown environment variable MLCONFIG_unknown=1\n    \"\"\"\n\n    train_batch_size: int = 1\n    alpha: float | None = None\n\n    @property\n    def envvar_prefix(self) -&gt; str:\n        return \"MLCONFIG_\"\n</code></pre>"},{"location":"reference/mlproject/utils/log/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> log","text":""},{"location":"reference/mlproject/utils/log/#mlproject.utils.log.setup_logging","title":"<code>setup_logging(console_level=default_log_level, output_files=None, file_levels=None)</code>","text":"<p>Setup logging with RichHandler and FileHandler.</p> <p>You should call this function at the beginning of your script.</p> <p>Parameters:</p> Name Type Description Default <code>console_level</code> <code>int | str</code> <p>Logging level for console. Defaults to INFO or env var MLPROJECT_LOG_LEVEL.</p> <code>default_log_level</code> <code>output_files</code> <code>list[str] | None</code> <p>List of output file paths, relative to LOG_DIR. If None, use default.</p> <code>None</code> <code>file_levels</code> <code>list[int] | None</code> <p>List of logging levels for each output file. If None, use default.</p> <code>None</code> Source code in <code>src/mlproject/utils/log.py</code> <pre><code>def setup_logging(\n    console_level: int | str = default_log_level,\n    output_files: list[str] | None = None,\n    file_levels: list[int] | None = None,\n):\n    \"\"\"\n    Setup logging with RichHandler and FileHandler.\n\n    You should call this function at the beginning of your script.\n\n    Args:\n        console_level: Logging level for console. Defaults to INFO or env var MLPROJECT_LOG_LEVEL.\n        output_files: List of output file paths, relative to LOG_DIR. If None, use default.\n        file_levels: List of logging levels for each output file. If None, use default.\n    \"\"\"\n    if output_files is None:\n        output_files = [\"{date:%Y%m%d-%H%M%S}-{name}-{levelname}-{version}.log\"]\n    if file_levels is None:\n        file_levels = [logging.INFO]\n\n    assert len(output_files) == len(\n        file_levels\n    ), \"output_files and file_levels must have the same length\"\n\n    # NOTE: Initialise with NOTSET level and null device, and add stream handler separately.\n    # This way, the root logging level is NOTSET (log all), and we can customise each handler's behaviour.\n    # If we set the level during the initialisation, it will affect to ALL streams,\n    # so the file stream cannot be more verbose (lower level) than the console stream.\n    logging.basicConfig(\n        format=\"\",\n        level=logging.NOTSET,\n        stream=open(os.devnull, \"w\"),  # noqa: SIM115\n    )\n\n    # If you want to suppress logs from other modules, set their level to WARNING or higher\n    # logging.getLogger('slowfast.utils.checkpoint').setLevel(logging.WARNING)\n\n    console_handler = RichHandler(\n        level=console_level,\n        show_time=True,\n        show_level=True,\n        show_path=True,\n        rich_tracebacks=True,\n        tracebacks_show_locals=True,\n    )\n    console_format = logging.Formatter(\n        fmt=\"%(name)s - %(message)s\",\n        datefmt=\"%m/%d %H:%M:%S\",\n    )\n    console_handler.setFormatter(console_format)\n\n    f_format = logging.Formatter(\n        fmt=\"%(asctime)s - %(name)s: %(lineno)4d - %(levelname)s - %(message)s\",\n        datefmt=\"%y/%m/%d %H:%M:%S\",\n    )\n\n    function_caller_module = inspect.getmodule(inspect.stack()[1][0])\n    if function_caller_module is None:\n        name_or_path = \"unknown\"\n    elif function_caller_module.__name__ == \"__main__\":\n        if function_caller_module.__file__ is None:\n            name_or_path = function_caller_module.__name__\n        else:\n            name_or_path = function_caller_module.__file__.replace(\n                str(PROJECT_DIR) + \"/\", \"\"\n            ).replace(\"/\", \".\")\n            # Remove .py extension\n            name_or_path = Path(name_or_path).with_suffix(\"\")\n\n    else:\n        name_or_path = function_caller_module.__name__\n\n    log_path_map = {\n        \"name\": name_or_path,\n        \"version\": __version__,\n        \"date\": datetime.now(timezone.utc),\n    }\n\n    root_logger = logging.getLogger()\n    root_logger.addHandler(console_handler)\n\n    log_paths = []\n    for output_file, file_level in zip(output_files, file_levels, strict=True):\n        log_path_map[\"levelname\"] = logging.getLevelName(file_level)\n        log_path = LOG_DIR / output_file.format_map(log_path_map)\n        log_path.parent.mkdir(parents=True, exist_ok=True)\n\n        f_handler = logging.FileHandler(log_path)\n        f_handler.setLevel(file_level)\n        f_handler.setFormatter(f_format)\n\n        # Add handlers to the logger\n        root_logger.addHandler(f_handler)\n\n    logger.info(f\"mlproject {__version__}\")\n\n    for log_path in log_paths:\n        logger.info(f\"Logging to {log_path}\")\n</code></pre>"},{"location":"reference/mlproject/utils/rich/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> rich","text":""},{"location":"reference/mlproject/utils/rich/#mlproject.utils.rich.rich_print_to_string","title":"<code>rich_print_to_string(objs)</code>","text":"<p>Convert a rich console print output to a string.</p> Source code in <code>src/mlproject/utils/rich.py</code> <pre><code>def rich_print_to_string(objs: Iterable[Any]) -&gt; str:\n    \"\"\"Convert a rich console print output to a string.\"\"\"\n    console = Console(\n        width=CONSOLE_WIDTH,\n        no_color=True,\n        highlight=False,\n        record=True,\n        file=open(os.devnull, \"w\"),  # noqa: SIM115\n    )\n\n    if not isinstance(objs, Iterable):\n        objs = [objs]\n    for obj in objs:\n        console.print(obj)\n\n    return console.export_text()\n</code></pre>"},{"location":"reference/mlproject/utils/rich/#mlproject.utils.rich.rich_print_to_html","title":"<code>rich_print_to_html(objs, backend='ansi2html')</code>","text":"<p>Convert a rich console print output to an html string.</p> <p>rich backend can be prettier with the following caveats: 1. It produces a larger file size (2x) 2. It isn't as easy to read as a plain HTML code due to alignment and many html tags. 3. Slack doesn't understand the HTML code produced by <code>console.export_html()</code> and treat it as a binary file.</p> <p>Parameters:</p> Name Type Description Default <code>objs</code> <code>Iterable[Any]</code> <p>The objects to print. Possibly but not limited to rich objects.</p> required <code>backend</code> <p>\"ansi2html\" or \"rich\". Defaults to \"ansi2html\".</p> <code>'ansi2html'</code> Source code in <code>src/mlproject/utils/rich.py</code> <pre><code>def rich_print_to_html(objs: Iterable[Any], backend=\"ansi2html\") -&gt; str:\n    \"\"\"\n    Convert a rich console print output to an html string.\n\n    rich backend can be prettier with the following caveats:\n    1. It produces a larger file size (2x)\n    2. It isn't as easy to read as a plain HTML code due to alignment and many html tags.\n    3. Slack doesn't understand the HTML code produced by `console.export_html()` and treat it as a binary file.\n\n    Args:\n        objs: The objects to print. Possibly but not limited to rich objects.\n        backend: \"ansi2html\" or \"rich\". Defaults to \"ansi2html\".\n    \"\"\"\n    assert backend in (\"ansi2html\", \"rich\")\n\n    console = Console(width=CONSOLE_WIDTH, record=True, file=open(os.devnull, \"w\"))  # noqa: SIM115\n\n    if not isinstance(objs, Iterable):\n        objs = [objs]\n    for obj in objs:\n        console.print(obj)\n\n    if backend == \"rich\":\n        return console.export_html(theme=MONOKAI)\n\n    tb_ansi = console.export_text(styles=True)  # text with ansi color codes\n    return Ansi2HTMLConverter().convert(tb_ansi)\n</code></pre>"},{"location":"reference/mlproject/utils/rich/#mlproject.utils.rich.rich_print_to_svg","title":"<code>rich_print_to_svg(objs, title)</code>","text":"<p>Convert a rich console print to an svg string.</p> Source code in <code>src/mlproject/utils/rich.py</code> <pre><code>def rich_print_to_svg(objs: Iterable[Any], title: str) -&gt; str:\n    \"\"\"Convert a rich console print to an svg string.\"\"\"\n    console = Console(width=CONSOLE_WIDTH, record=True, file=open(os.devnull, \"w\"))  # noqa: SIM115\n\n    if not isinstance(objs, Iterable):\n        objs = [objs]\n    for obj in objs:\n        console.print(obj)\n\n    return console.export_svg(title=title)\n</code></pre>"},{"location":"reference/mlproject/utils/rich/#mlproject.utils.rich.rich_traceback_to_string","title":"<code>rich_traceback_to_string(tb)</code>","text":"<p>Convert a rich traceback to a string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; try:\n...    1 / 0\n... except ZeroDivisionError:\n...     import rich.traceback\n...     tb = rich.traceback.Traceback()\n...     print(rich_traceback_to_string(tb))\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n...\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nZeroDivisionError: division by zero\n</code></pre> Source code in <code>src/mlproject/utils/rich.py</code> <pre><code>def rich_traceback_to_string(tb: Traceback) -&gt; str:\n    \"\"\"\n    Convert a rich traceback to a string.\n\n    Examples:\n        &gt;&gt;&gt; try:   # doctest: +ELLIPSIS\n        ...    1 / 0\n        ... except ZeroDivisionError:\n        ...     import rich.traceback\n        ...     tb = rich.traceback.Traceback()\n        ...     print(rich_traceback_to_string(tb))\n        \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n        ...\n        \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n        ZeroDivisionError: division by zero\n        &lt;BLANKLINE&gt;\n    \"\"\"\n    return rich_print_to_string([tb])\n</code></pre>"},{"location":"reference/mlproject/utils/rich/#mlproject.utils.rich.rich_traceback_to_html","title":"<code>rich_traceback_to_html(tb, backend='ansi2html')</code>","text":"<p>Convert a rich traceback to an html string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; try:\n...    1 / 0\n... except ZeroDivisionError:\n...     import rich.traceback\n...     tb = rich.traceback.Traceback()\n...     print(rich_traceback_to_html(tb))\n&lt;!DOCTYPE HTML ...\n&lt;/html&gt;\n</code></pre> Source code in <code>src/mlproject/utils/rich.py</code> <pre><code>def rich_traceback_to_html(tb: Traceback, backend=\"ansi2html\") -&gt; str:\n    \"\"\"\n    Convert a rich traceback to an html string.\n\n    Examples:\n        &gt;&gt;&gt; try:   # doctest: +ELLIPSIS\n        ...    1 / 0\n        ... except ZeroDivisionError:\n        ...     import rich.traceback\n        ...     tb = rich.traceback.Traceback()\n        ...     print(rich_traceback_to_html(tb))\n        &lt;!DOCTYPE HTML ...\n        &lt;/html&gt;\n        &lt;BLANKLINE&gt;\n    \"\"\"\n    return rich_print_to_html([tb], backend=backend)\n</code></pre>"},{"location":"reference/mlproject/utils/rich/#mlproject.utils.rich.rich_traceback_to_svg","title":"<code>rich_traceback_to_svg(tb, title)</code>","text":"<p>Convert a rich traceback to an svg string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; try:\n...    1 / 0\n... except ZeroDivisionError:\n...     import rich.traceback\n...     tb = rich.traceback.Traceback()\n...     print(rich_traceback_to_svg(tb, \"title\"))\n&lt;svg class=\"rich-terminal\" ...\n&lt;/svg&gt;\n</code></pre> Source code in <code>src/mlproject/utils/rich.py</code> <pre><code>def rich_traceback_to_svg(tb: Traceback, title: str) -&gt; str:\n    \"\"\"\n    Convert a rich traceback to an svg string.\n\n    Examples:\n        &gt;&gt;&gt; try:   # doctest: +ELLIPSIS\n        ...    1 / 0\n        ... except ZeroDivisionError:\n        ...     import rich.traceback\n        ...     tb = rich.traceback.Traceback()\n        ...     print(rich_traceback_to_svg(tb, \"title\"))\n        &lt;svg class=\"rich-terminal\" ...\n        &lt;/svg&gt;\n        &lt;BLANKLINE&gt;\n    \"\"\"\n    return rich_print_to_svg([tb], title)\n</code></pre>"},{"location":"reference/mlproject/utils/slack/","title":"Index","text":""},{"location":"reference/mlproject/utils/slack/interactive/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> interactive","text":"<p>This module is used to start the Slack app in interactive mode.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from mlproject.utils.slack import app\n&gt;&gt;&gt; from mlproject.utils.slack.interactive import handler\n&gt;&gt;&gt; @app.message(\"hello\")\n... def hello_message(body: dict[str, Any], say):\n...     logger.info(\"Received a hello command\")\n...     logger.info(f\"body: {pformat(body)}\")\n...     say(text=f\"Hi &lt;@{body['event']['user']}&gt;!\")\n</code></pre> <pre><code>&gt;&gt;&gt; handler.start()\n</code></pre>"},{"location":"reference/mlproject/utils/slack/send_only/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> send_only","text":""},{"location":"reference/mlproject/utils/slack/send_only/#mlproject.utils.slack.send_only.send_text_as_file","title":"<code>send_text_as_file(*, filename, content, title, ensure_preview=False, initial_comment=None, channel_id=None, client=None)</code>","text":"<p>Send a text as a file to the default client and channel (if not specified).</p> <p>Slack is stupid and having special characters in the file makes it think it's a binary file. If ensure_preview is True, then we append six double quotes at the beginning of the file so Slack thinks it's a python file and will preview it.</p> Note <p><code>ensure_preview</code> is a hacky workaround and may not work in the future.</p> Issues <p><code>ensure_preview</code> only works with text-ish files (txt, html, etc.) and not with other files (pdf, png, svg). You can set the <code>filename</code> to be like \"file.html\" for svg files with the <code>ensure_preview</code> flag.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> required <code>content</code> <code>str</code> required <code>title</code> <code>str</code> required <code>ensure_preview</code> <code>bool</code> <p>If True, append six double quotes at the beginning of the file to ensure that             Slack will preview it.</p> <code>False</code> <code>initial_comment</code> <code>str | None</code> <code>None</code> <code>channel_id</code> <code>str | None</code> <code>None</code> <code>client</code> <code>WebClient | None</code> <code>None</code> Source code in <code>src/mlproject/utils/slack/send_only.py</code> <pre><code>def send_text_as_file(\n    *,\n    filename: str,\n    content: str,\n    title: str,\n    ensure_preview: bool = False,\n    initial_comment: str | None = None,\n    channel_id: str | None = None,\n    client: WebClient | None = None,\n):\n    \"\"\"\n    Send a text as a file to the default client and channel (if not specified).\n\n    Slack is stupid and having special characters in the file makes it think it's a binary file.\n    If ensure_preview is True, then we append six double quotes at the beginning of the file so Slack thinks\n    it's a python file and will preview it.\n\n    Note:\n        `ensure_preview` is a hacky workaround and may not work in the future.\n\n    Issues:\n        `ensure_preview` only works with text-ish files (txt, html, etc.) and not with other files (pdf, png, svg).\n        You can set the `filename` to be like \"file.html\" for svg files with the `ensure_preview` flag.\n\n    Args:\n        filename:\n        content:\n        title:\n        ensure_preview: If True, append six double quotes at the beginning of the file to ensure that\n                        Slack will preview it.\n        initial_comment:\n        channel_id:\n        client:\n    \"\"\"\n    if client is None:\n        client = default_client\n    if client is None:\n        warn_once()\n        return None\n    if channel_id is None:\n        channel_id = default_channel_id\n        assert channel_id is not None\n\n    if ensure_preview:\n        content = '\"\"\"\"dear-viewer\"\"\"\"\\n' + content\n\n    return client.files_upload_v2(\n        filename=filename,\n        content=content,\n        title=title,\n        channel=channel_id,\n        initial_comment=initial_comment,\n    )\n</code></pre>"},{"location":"reference/mlproject/utils/slack/send_only/#mlproject.utils.slack.send_only.send_svg_as_pdf","title":"<code>send_svg_as_pdf(filename, svg_file, title, initial_comment=None, channel_id=None, client=None)</code>","text":"<p>Send an SVG file as a PDF file.</p> <p>Slack does not support previewing SVG files, so we convert it to PDF.</p> Issues <p>The cairosvg library does not have good support for fonts, and if you <code>export_svg</code> from <code>rich.console</code> then it will have font alignment issues, even if you install the Fira Code font on your system.</p> Source code in <code>src/mlproject/utils/slack/send_only.py</code> <pre><code>def send_svg_as_pdf(\n    filename: str,\n    svg_file: str | bytes | IOBase,\n    title: str,\n    initial_comment: str | None = None,\n    channel_id: str | None = None,\n    client: WebClient | None = None,\n):\n    \"\"\"\n    Send an SVG file as a PDF file.\n\n    Slack does not support previewing SVG files, so we convert it to PDF.\n\n    Issues:\n        The cairosvg library does not have good support for fonts, and if you `export_svg` from `rich.console`\n        then it will have font alignment issues, even if you install the Fira Code font on your system.\n    \"\"\"\n    if client is None:\n        client = default_client\n    if client is None:\n        warn_once()\n        return None\n    if channel_id is None:\n        channel_id = default_channel_id\n        assert channel_id is not None\n\n    pdf_buf = BytesIO()\n\n    if isinstance(svg_file, str | bytes):\n        cairosvg.svg2pdf(bytestring=svg_file, write_to=pdf_buf)\n    elif isinstance(svg_file, IOBase):\n        cairosvg.svg2pdf(file_obj=svg_file, write_to=pdf_buf)\n    else:\n        raise ValueError(f\"Unsupported type {type(svg_file)}\")\n\n    pdf_buf.seek(0)\n\n    return client.files_upload_v2(\n        filename=filename,\n        file=pdf_buf,\n        title=title,\n        channel=channel_id,\n        initial_comment=initial_comment,\n    )\n</code></pre>"}]}